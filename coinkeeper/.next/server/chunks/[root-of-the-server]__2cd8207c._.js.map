{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: [\"query\"],\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma; "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { prisma } from \"./prisma\";\nimport bcrypt from \"bcryptjs\";\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma) as any,\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          console.error(\"Invalid credentials provided\");\n          throw new Error(\"Invalid credentials\");\n        }\n\n        try {\n          const user = await prisma.user.findUnique({\n            where: {\n              email: credentials.email\n            }\n          });\n\n          if (!user) {\n            console.error(\"User not found:\", credentials.email);\n            throw new Error(\"User not found\");\n          }\n\n          const isPasswordValid = await bcrypt.compare(\n            credentials.password,\n            user.password\n          );\n\n          if (!isPasswordValid) {\n            console.error(\"Invalid password for user:\", credentials.email);\n            throw new Error(\"Invalid password\");\n          }\n\n          console.log(\"User authenticated successfully:\", user.email);\n          return {\n            id: user.id.toString(),\n            email: user.email,\n            username: user.username\n          };\n        } catch (error) {\n          console.error(\"Authorization error:\", error);\n          throw new Error(\"Authentication failed\");\n        }\n      }\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n    }),\n  ],\n  pages: {\n    signIn: \"/auth/signin\",\n    signOut: \"/auth/signout\",\n    error: \"/auth/error\",\n  },\n  session: {\n    strategy: \"jwt\",\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n  debug: process.env.NODE_ENV === \"development\",\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        console.log(\"JWT callback with user:\", user.email);\n        token.id = user.id;\n        token.username = user.username;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        console.log(\"Session callback with token for user ID:\", token.id);\n        session.user.id = token.id;\n        session.user.username = token.username;\n      }\n      return session;\n    },\n    async redirect({ url, baseUrl }) {\n      console.log(\"Redirect callback, url:\", url, \"baseUrl:\", baseUrl);\n      // If the URL starts with the base URL, it's a relative URL\n      if (url.startsWith(baseUrl)) return url;\n      // Otherwise, make sure we only redirect to relative URLs or our own domain\n      if (url.startsWith(\"/\")) return `${baseUrl}${url}`;\n      return baseUrl;\n    }\n  },\n}; "],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,sJAAA,CAAA,gBAAa,AAAD,EAAE,sHAAA,CAAA,SAAM;IAC7B,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,QAAQ,KAAK,CAAC;oBACd,MAAM,IAAI,MAAM;gBAClB;gBAEA,IAAI;oBACF,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;wBACxC,OAAO;4BACL,OAAO,YAAY,KAAK;wBAC1B;oBACF;oBAEA,IAAI,CAAC,MAAM;wBACT,QAAQ,KAAK,CAAC,mBAAmB,YAAY,KAAK;wBAClD,MAAM,IAAI,MAAM;oBAClB;oBAEA,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,KAAK,QAAQ;oBAGf,IAAI,CAAC,iBAAiB;wBACpB,QAAQ,KAAK,CAAC,8BAA8B,YAAY,KAAK;wBAC7D,MAAM,IAAI,MAAM;oBAClB;oBAEA,QAAQ,GAAG,CAAC,oCAAoC,KAAK,KAAK;oBAC1D,OAAO;wBACL,IAAI,KAAK,EAAE,CAAC,QAAQ;wBACpB,OAAO,KAAK,KAAK;wBACjB,UAAU,KAAK,QAAQ;oBACzB;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,wBAAwB;oBACtC,MAAM,IAAI,MAAM;gBAClB;YACF;QACF;QACA,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;YAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;QACpD;KACD;IACD,OAAO;QACL,QAAQ;QACR,SAAS;QACT,OAAO;IACT;IACA,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,OAAO,oDAAyB;IAChC,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,QAAQ,GAAG,CAAC,2BAA2B,KAAK,KAAK;gBACjD,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,QAAQ,GAAG,KAAK,QAAQ;YAChC;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,GAAG,CAAC,4CAA4C,MAAM,EAAE;gBAChE,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,QAAQ,GAAG,MAAM,QAAQ;YACxC;YACA,OAAO;QACT;QACA,MAAM,UAAS,EAAE,GAAG,EAAE,OAAO,EAAE;YAC7B,QAAQ,GAAG,CAAC,2BAA2B,KAAK,YAAY;YACxD,2DAA2D;YAC3D,IAAI,IAAI,UAAU,CAAC,UAAU,OAAO;YACpC,2EAA2E;YAC3E,IAAI,IAAI,UAAU,CAAC,MAAM,OAAO,GAAG,UAAU,KAAK;YAClD,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/app/api/dashboard/stats/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { prisma } from '@/lib/prisma';\nimport { authOptions } from '@/lib/auth';\n\ninterface Account {\n  balance: number;\n}\n\ninterface Transaction {\n  id: number;\n  amount: number;\n  description: string | null;\n  date: Date;\n  type: string;\n  category: {\n    name: string;\n  };\n}\n\ninterface Category {\n  id: number;\n  name: string;\n  color: string | null;\n  transactions: Array<{ amount: number }>;\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { message: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    const userIdStr = session.user.id;\n    const userId = parseInt(userIdStr);\n    \n    if (isNaN(userId)) {\n      return NextResponse.json({ error: 'Invalid user ID' }, { status: 400 });\n    }\n\n    // Get total balance from all accounts\n    const accounts = await prisma.account.findMany({\n      where: {\n        userId,\n        deletedAt: null,\n      },\n      select: {\n        balance: true,\n      },\n    });\n\n    const totalBalance = accounts.reduce((sum: number, account: Account) => sum + account.balance, 0);\n\n    // Get transactions for income and expenses\n    const transactions = await prisma.transaction.findMany({\n      where: {\n        userId,\n        deletedAt: null,\n      },\n      include: {\n        category: true,\n      },\n      orderBy: {\n        date: 'desc',\n      },\n      take: 5, // Get only recent 5 transactions\n    });\n\n    // Calculate totals\n    const totalIncome = transactions\n      .filter((t: Transaction) => t.type === 'income')\n      .reduce((sum: number, t: Transaction) => sum + t.amount, 0);\n\n    const totalExpenses = transactions\n      .filter((t: Transaction) => t.type === 'expense')\n      .reduce((sum: number, t: Transaction) => sum + t.amount, 0);\n\n    // Get expenses by category\n    const categories = await prisma.category.findMany({\n      where: {\n        userId,\n        type: 'expense',\n        deletedAt: null,\n      },\n      include: {\n        transactions: {\n          where: {\n            type: 'expense',\n            deletedAt: null,\n          },\n        },\n      },\n    });\n\n    const expensesByCategory = {\n      labels: categories.map((c: Category) => c.name),\n      data: categories.map((c: Category) => \n        c.transactions.reduce((sum: number, t: { amount: number }) => sum + t.amount, 0)\n      ),\n      backgroundColor: categories.map((c: Category) => c.color || '#000000'),\n    };\n\n    // Format recent transactions\n    const recentTransactions = transactions.map((t: Transaction) => ({\n      id: t.id,\n      description: t.description,\n      amount: t.amount,\n      type: t.type,\n      category: t.category.name,\n      date: t.date,\n    }));\n\n    return NextResponse.json({\n      totalBalance,\n      totalIncome,\n      totalExpenses,\n      expensesByCategory,\n      recentTransactions,\n    });\n  } catch (error) {\n    console.error('Error fetching dashboard stats:', error);\n    return NextResponse.json(\n      { message: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;;;;;AAwBO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,oHAAA,CAAA,cAAW;QAElD,IAAI,CAAC,SAAS,MAAM,IAAI;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAe,GAC1B;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,YAAY,QAAQ,IAAI,CAAC,EAAE;QACjC,MAAM,SAAS,SAAS;QAExB,IAAI,MAAM,SAAS;YACjB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,OAAO;YAAkB,GAAG;gBAAE,QAAQ;YAAI;QACvE;QAEA,sCAAsC;QACtC,MAAM,WAAW,MAAM,sHAAA,CAAA,SAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC7C,OAAO;gBACL;gBACA,WAAW;YACb;YACA,QAAQ;gBACN,SAAS;YACX;QACF;QAEA,MAAM,eAAe,SAAS,MAAM,CAAC,CAAC,KAAa,UAAqB,MAAM,QAAQ,OAAO,EAAE;QAE/F,2CAA2C;QAC3C,MAAM,eAAe,MAAM,sHAAA,CAAA,SAAM,CAAC,WAAW,CAAC,QAAQ,CAAC;YACrD,OAAO;gBACL;gBACA,WAAW;YACb;YACA,SAAS;gBACP,UAAU;YACZ;YACA,SAAS;gBACP,MAAM;YACR;YACA,MAAM;QACR;QAEA,mBAAmB;QACnB,MAAM,cAAc,aACjB,MAAM,CAAC,CAAC,IAAmB,EAAE,IAAI,KAAK,UACtC,MAAM,CAAC,CAAC,KAAa,IAAmB,MAAM,EAAE,MAAM,EAAE;QAE3D,MAAM,gBAAgB,aACnB,MAAM,CAAC,CAAC,IAAmB,EAAE,IAAI,KAAK,WACtC,MAAM,CAAC,CAAC,KAAa,IAAmB,MAAM,EAAE,MAAM,EAAE;QAE3D,2BAA2B;QAC3B,MAAM,aAAa,MAAM,sHAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAChD,OAAO;gBACL;gBACA,MAAM;gBACN,WAAW;YACb;YACA,SAAS;gBACP,cAAc;oBACZ,OAAO;wBACL,MAAM;wBACN,WAAW;oBACb;gBACF;YACF;QACF;QAEA,MAAM,qBAAqB;YACzB,QAAQ,WAAW,GAAG,CAAC,CAAC,IAAgB,EAAE,IAAI;YAC9C,MAAM,WAAW,GAAG,CAAC,CAAC,IACpB,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC,KAAa,IAA0B,MAAM,EAAE,MAAM,EAAE;YAEhF,iBAAiB,WAAW,GAAG,CAAC,CAAC,IAAgB,EAAE,KAAK,IAAI;QAC9D;QAEA,6BAA6B;QAC7B,MAAM,qBAAqB,aAAa,GAAG,CAAC,CAAC,IAAmB,CAAC;gBAC/D,IAAI,EAAE,EAAE;gBACR,aAAa,EAAE,WAAW;gBAC1B,QAAQ,EAAE,MAAM;gBAChB,MAAM,EAAE,IAAI;gBACZ,UAAU,EAAE,QAAQ,CAAC,IAAI;gBACzB,MAAM,EAAE,IAAI;YACd,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB;YACA;YACA;YACA;YACA;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}