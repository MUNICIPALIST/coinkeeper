{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: [\"query\"],\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma; "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { prisma } from \"./prisma\";\nimport bcrypt from \"bcryptjs\";\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma) as any,\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          console.error(\"Invalid credentials provided\");\n          throw new Error(\"Invalid credentials\");\n        }\n\n        try {\n          const user = await prisma.user.findUnique({\n            where: {\n              email: credentials.email\n            }\n          });\n\n          if (!user) {\n            console.error(\"User not found:\", credentials.email);\n            throw new Error(\"User not found\");\n          }\n\n          const isPasswordValid = await bcrypt.compare(\n            credentials.password,\n            user.password\n          );\n\n          if (!isPasswordValid) {\n            console.error(\"Invalid password for user:\", credentials.email);\n            throw new Error(\"Invalid password\");\n          }\n\n          console.log(\"User authenticated successfully:\", user.email);\n          return {\n            id: user.id.toString(),\n            email: user.email,\n            username: user.username\n          };\n        } catch (error) {\n          console.error(\"Authorization error:\", error);\n          throw new Error(\"Authentication failed\");\n        }\n      }\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n    }),\n  ],\n  pages: {\n    signIn: \"/auth/signin\",\n    signOut: \"/auth/signout\",\n    error: \"/auth/error\",\n  },\n  session: {\n    strategy: \"jwt\",\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n  debug: process.env.NODE_ENV === \"development\",\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        console.log(\"JWT callback with user:\", user.email);\n        token.id = user.id;\n        token.username = user.username;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        console.log(\"Session callback with token for user ID:\", token.id);\n        session.user.id = token.id;\n        session.user.username = token.username;\n      }\n      return session;\n    },\n    async redirect({ url, baseUrl }) {\n      console.log(\"Redirect callback, url:\", url, \"baseUrl:\", baseUrl);\n      // If the URL starts with the base URL, it's a relative URL\n      if (url.startsWith(baseUrl)) return url;\n      // Otherwise, make sure we only redirect to relative URLs or our own domain\n      if (url.startsWith(\"/\")) return `${baseUrl}${url}`;\n      return baseUrl;\n    }\n  },\n}; "],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,sJAAA,CAAA,gBAAa,AAAD,EAAE,sHAAA,CAAA,SAAM;IAC7B,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,QAAQ,KAAK,CAAC;oBACd,MAAM,IAAI,MAAM;gBAClB;gBAEA,IAAI;oBACF,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;wBACxC,OAAO;4BACL,OAAO,YAAY,KAAK;wBAC1B;oBACF;oBAEA,IAAI,CAAC,MAAM;wBACT,QAAQ,KAAK,CAAC,mBAAmB,YAAY,KAAK;wBAClD,MAAM,IAAI,MAAM;oBAClB;oBAEA,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,KAAK,QAAQ;oBAGf,IAAI,CAAC,iBAAiB;wBACpB,QAAQ,KAAK,CAAC,8BAA8B,YAAY,KAAK;wBAC7D,MAAM,IAAI,MAAM;oBAClB;oBAEA,QAAQ,GAAG,CAAC,oCAAoC,KAAK,KAAK;oBAC1D,OAAO;wBACL,IAAI,KAAK,EAAE,CAAC,QAAQ;wBACpB,OAAO,KAAK,KAAK;wBACjB,UAAU,KAAK,QAAQ;oBACzB;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,wBAAwB;oBACtC,MAAM,IAAI,MAAM;gBAClB;YACF;QACF;QACA,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;YAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;QACpD;KACD;IACD,OAAO;QACL,QAAQ;QACR,SAAS;QACT,OAAO;IACT;IACA,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,OAAO,oDAAyB;IAChC,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,QAAQ,GAAG,CAAC,2BAA2B,KAAK,KAAK;gBACjD,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,QAAQ,GAAG,KAAK,QAAQ;YAChC;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,GAAG,CAAC,4CAA4C,MAAM,EAAE;gBAChE,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,QAAQ,GAAG,MAAM,QAAQ;YACxC;YACA,OAAO;QACT;QACA,MAAM,UAAS,EAAE,GAAG,EAAE,OAAO,EAAE;YAC7B,QAAQ,GAAG,CAAC,2BAA2B,KAAK,YAAY;YACxD,2DAA2D;YAC3D,IAAI,IAAI,UAAU,CAAC,UAAU,OAAO;YACpC,2EAA2E;YAC3E,IAAI,IAAI,UAAU,CAAC,MAAM,OAAO,GAAG,UAAU,KAAK;YAClD,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/app/api/settings/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\n\n// GET /api/settings - Get user settings\nexport async function GET(request: NextRequest) {\n  try {\n    // Check if user is authenticated\n    const session = await getServerSession(authOptions);\n    if (!session?.user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const userId = parseInt(session.user.id);\n    if (isNaN(userId)) {\n      return NextResponse.json({ error: 'Invalid user ID' }, { status: 400 });\n    }\n\n    // Get user settings from database\n    const userSettings = await prisma.userSettings.findUnique({\n      where: {\n        userId: userId,\n      },\n    });\n\n    // If settings exist, return them\n    if (userSettings) {\n      return NextResponse.json({\n        theme: userSettings.theme || 'light',\n        currency: userSettings.currency || 'USD',\n        language: userSettings.language || 'en',\n        dateFormat: userSettings.dateFormat || 'MM/DD/YYYY',\n        notifications: userSettings.notifications,\n      });\n    }\n\n    // If no settings exist, create default settings\n    const defaultSettings = {\n      theme: 'light',\n      currency: 'USD',\n      language: 'en',\n      dateFormat: 'MM/DD/YYYY',\n      notifications: true,\n    };\n\n    // Create default settings in database\n    await prisma.userSettings.create({\n      data: {\n        ...defaultSettings,\n        userId: userId,\n      },\n    });\n\n    return NextResponse.json(defaultSettings);\n  } catch (error) {\n    console.error('Error fetching user settings:', error);\n    return NextResponse.json(\n      { error: 'Failed to fetch settings' },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/settings - Update user settings\nexport async function PUT(request: NextRequest) {\n  try {\n    // Check if user is authenticated\n    const session = await getServerSession(authOptions);\n    if (!session?.user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const userId = parseInt(session.user.id);\n    if (isNaN(userId)) {\n      return NextResponse.json({ error: 'Invalid user ID' }, { status: 400 });\n    }\n\n    // Get settings from request body\n    const data = await request.json();\n    const { theme, currency, language, dateFormat, notifications } = data;\n\n    // Validate settings\n    if (!theme || !currency || !language || !dateFormat) {\n      return NextResponse.json(\n        { error: 'Missing required settings' },\n        { status: 400 }\n      );\n    }\n\n    // Check if settings exist\n    const existingSettings = await prisma.userSettings.findUnique({\n      where: {\n        userId: userId,\n      },\n    });\n\n    let updatedSettings;\n\n    if (existingSettings) {\n      // Update existing settings\n      updatedSettings = await prisma.userSettings.update({\n        where: {\n          userId: userId,\n        },\n        data: {\n          theme,\n          currency,\n          language,\n          dateFormat,\n          notifications,\n        },\n      });\n    } else {\n      // Create new settings\n      updatedSettings = await prisma.userSettings.create({\n        data: {\n          theme,\n          currency,\n          language,\n          dateFormat,\n          notifications,\n          userId: userId,\n        },\n      });\n    }\n\n    return NextResponse.json(updatedSettings);\n  } catch (error) {\n    console.error('Error updating user settings:', error);\n    return NextResponse.json(\n      { error: 'Failed to update settings' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}