{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: [\"query\"],\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma; "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { prisma } from \"./prisma\";\nimport bcrypt from \"bcryptjs\";\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma) as any,\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          console.error(\"Invalid credentials provided\");\n          throw new Error(\"Invalid credentials\");\n        }\n\n        try {\n          const user = await prisma.user.findUnique({\n            where: {\n              email: credentials.email\n            }\n          });\n\n          if (!user) {\n            console.error(\"User not found:\", credentials.email);\n            throw new Error(\"User not found\");\n          }\n\n          const isPasswordValid = await bcrypt.compare(\n            credentials.password,\n            user.password\n          );\n\n          if (!isPasswordValid) {\n            console.error(\"Invalid password for user:\", credentials.email);\n            throw new Error(\"Invalid password\");\n          }\n\n          console.log(\"User authenticated successfully:\", user.email);\n          return {\n            id: user.id.toString(),\n            email: user.email,\n            username: user.username\n          };\n        } catch (error) {\n          console.error(\"Authorization error:\", error);\n          throw new Error(\"Authentication failed\");\n        }\n      }\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n    }),\n  ],\n  pages: {\n    signIn: \"/auth/signin\",\n    signOut: \"/auth/signout\",\n    error: \"/auth/error\",\n  },\n  session: {\n    strategy: \"jwt\",\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n  debug: process.env.NODE_ENV === \"development\",\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        console.log(\"JWT callback with user:\", user.email);\n        token.id = user.id;\n        token.username = user.username;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        console.log(\"Session callback with token for user ID:\", token.id);\n        session.user.id = token.id;\n        session.user.username = token.username;\n      }\n      return session;\n    },\n    async redirect({ url, baseUrl }) {\n      console.log(\"Redirect callback, url:\", url, \"baseUrl:\", baseUrl);\n      // If the URL starts with the base URL, it's a relative URL\n      if (url.startsWith(baseUrl)) return url;\n      // Otherwise, make sure we only redirect to relative URLs or our own domain\n      if (url.startsWith(\"/\")) return `${baseUrl}${url}`;\n      return baseUrl;\n    }\n  },\n}; "],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,sJAAA,CAAA,gBAAa,AAAD,EAAE,sHAAA,CAAA,SAAM;IAC7B,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,QAAQ,KAAK,CAAC;oBACd,MAAM,IAAI,MAAM;gBAClB;gBAEA,IAAI;oBACF,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;wBACxC,OAAO;4BACL,OAAO,YAAY,KAAK;wBAC1B;oBACF;oBAEA,IAAI,CAAC,MAAM;wBACT,QAAQ,KAAK,CAAC,mBAAmB,YAAY,KAAK;wBAClD,MAAM,IAAI,MAAM;oBAClB;oBAEA,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,KAAK,QAAQ;oBAGf,IAAI,CAAC,iBAAiB;wBACpB,QAAQ,KAAK,CAAC,8BAA8B,YAAY,KAAK;wBAC7D,MAAM,IAAI,MAAM;oBAClB;oBAEA,QAAQ,GAAG,CAAC,oCAAoC,KAAK,KAAK;oBAC1D,OAAO;wBACL,IAAI,KAAK,EAAE,CAAC,QAAQ;wBACpB,OAAO,KAAK,KAAK;wBACjB,UAAU,KAAK,QAAQ;oBACzB;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,wBAAwB;oBACtC,MAAM,IAAI,MAAM;gBAClB;YACF;QACF;QACA,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;YAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;QACpD;KACD;IACD,OAAO;QACL,QAAQ;QACR,SAAS;QACT,OAAO;IACT;IACA,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,OAAO,oDAAyB;IAChC,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,QAAQ,GAAG,CAAC,2BAA2B,KAAK,KAAK;gBACjD,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,QAAQ,GAAG,KAAK,QAAQ;YAChC;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,GAAG,CAAC,4CAA4C,MAAM,EAAE;gBAChE,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,QAAQ,GAAG,MAAM,QAAQ;YACxC;YACA,OAAO;QACT;QACA,MAAM,UAAS,EAAE,GAAG,EAAE,OAAO,EAAE;YAC7B,QAAQ,GAAG,CAAC,2BAA2B,KAAK,YAAY;YACxD,2DAA2D;YAC3D,IAAI,IAAI,UAAU,CAAC,UAAU,OAAO;YACpC,2EAA2E;YAC3E,IAAI,IAAI,UAAU,CAAC,MAAM,OAAO,GAAG,UAAU,KAAK;YAClD,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/app/api/goals/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\n\ninterface GoalRequest {\n  name: string;\n  targetAmount: number;\n  currentAmount: number;\n  deadline: string;\n  description?: string;\n}\n\ninterface Goal {\n  id: number;\n  name: string;\n  targetAmount: number;\n  currentAmount: number;\n  deadline: Date;\n  status: string;\n  description: string | null;\n  userId: number;\n  createdAt: Date;\n  updatedAt: Date;\n  deletedAt: Date | null;\n}\n\n// GET /api/goals - Get all goals for the current user\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 }\n      );\n    }\n\n    // Parse userId as integer and validate\n    const userId = parseInt(session.user.id);\n    if (isNaN(userId)) {\n      console.error('Invalid user ID:', session.user.id);\n      return NextResponse.json(\n        { error: 'Invalid user ID' },\n        { status: 400 }\n      );\n    }\n\n    console.log('Fetching goals for userId:', userId, typeof userId);\n\n    const goals = await prisma.goal.findMany({\n      where: {\n        userId: userId, // Explicitly use the parsed integer userId\n        deletedAt: null,\n      },\n      orderBy: {\n        createdAt: 'desc',\n      },\n    });\n\n    console.log('Found goals:', goals ? goals.length : 0);\n\n    // Update status based on deadline and progress\n    const updatedGoals = goals.map((goal) => {\n      const deadlineDate = goal.deadline;\n      const today = new Date();\n      const progress = (goal.currentAmount / goal.targetAmount) * 100;\n      \n      let status = goal.status;\n      \n      // Update status based on progress and deadline\n      if (progress >= 100) {\n        status = 'completed';\n      } else if (deadlineDate && deadlineDate < today) {\n        status = 'expired';\n      } else if (deadlineDate && deadlineDate.getTime() - today.getTime() < 7 * 24 * 60 * 60 * 1000) {\n        // Less than 7 days remaining\n        status = 'at_risk';\n      } else {\n        status = 'in_progress';\n      }\n\n      return {\n        ...goal,\n        status,\n      };\n    });\n\n    return NextResponse.json(updatedGoals);\n  } catch (error) {\n    console.error('Error fetching goals:', error);\n    return NextResponse.json(\n      { error: 'Internal server error', message: error instanceof Error ? error.message : String(error) },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/goals - Create a new goal\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 }\n      );\n    }\n\n    const userId = parseInt(session.user.id);\n    if (isNaN(userId)) {\n      console.error('Invalid user ID:', session.user.id);\n      return NextResponse.json(\n        { error: 'Invalid user ID' },\n        { status: 400 }\n      );\n    }\n\n    const goal: GoalRequest = await request.json();\n    console.log('Creating goal with userId:', userId, typeof userId);\n\n    const newGoal = await prisma.goal.create({\n      data: {\n        name: goal.name,\n        targetAmount: goal.targetAmount,\n        currentAmount: goal.currentAmount || 0,\n        deadline: new Date(goal.deadline),\n        description: goal.description || null,\n        status: 'in_progress',\n        userId: userId, // Explicitly use the parsed integer userId\n      },\n    });\n\n    return NextResponse.json(newGoal);\n  } catch (error) {\n    console.error('Error creating goal:', error);\n    return NextResponse.json(\n      { error: 'Internal server error', message: error instanceof Error ? error.message : String(error) },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/goals - Update an existing goal\nexport async function PUT(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: 'Authentication required' },\n        { status: 401 }\n      );\n    }\n\n    const userId = parseInt(session.user.id);\n    if (isNaN(userId)) {\n      console.error('Invalid user ID:', session.user.id);\n      return NextResponse.json(\n        { error: 'Invalid user ID' },\n        { status: 400 }\n      );\n    }\n\n    const { id, ...goalData }: { id: number } & GoalRequest = await request.json();\n    console.log('Updating goal with ID:', id, 'for userId:', userId, typeof userId);\n\n    // Check if the goal exists and belongs to the user\n    const existingGoal = await prisma.goal.findFirst({\n      where: {\n        id,\n        userId: userId, // Explicitly use the parsed integer userId\n        deletedAt: null,\n      },\n    });\n\n    if (!existingGoal) {\n      return NextResponse.json(\n        { error: 'Goal not found' },\n        { status: 404 }\n      );\n    }\n\n    // Calculate progress and status\n    const deadlineDate = new Date(goalData.deadline);\n    const today = new Date();\n    const progress = (goalData.currentAmount / goalData.targetAmount) * 100;\n    \n    let status = existingGoal.status;\n    \n    if (progress >= 100) {\n      status = 'completed';\n    } else if (deadlineDate && deadlineDate < today) {\n      status = 'expired';\n    } else if (deadlineDate && deadlineDate.getTime() - today.getTime() < 7 * 24 * 60 * 60 * 1000) {\n      status = 'at_risk';\n    } else {\n      status = 'in_progress';\n    }\n\n    // Update the goal\n    const updatedGoal = await prisma.goal.update({\n      where: { id },\n      data: {\n        name: goalData.name,\n        targetAmount: goalData.targetAmount,\n        currentAmount: goalData.currentAmount,\n        deadline: deadlineDate,\n        description: goalData.description,\n        status,\n      },\n    });\n\n    return NextResponse.json(updatedGoal);\n  } catch (error) {\n    console.error('Error updating goal:', error);\n    return NextResponse.json(\n      { error: 'Internal server error', message: error instanceof Error ? error.message : String(error) },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}