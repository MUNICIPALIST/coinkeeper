{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: [\"query\"],\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma; "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { prisma } from \"./prisma\";\nimport bcrypt from \"bcryptjs\";\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma) as any,\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          console.error(\"Invalid credentials provided\");\n          throw new Error(\"Invalid credentials\");\n        }\n\n        try {\n          const user = await prisma.user.findUnique({\n            where: {\n              email: credentials.email\n            }\n          });\n\n          if (!user) {\n            console.error(\"User not found:\", credentials.email);\n            throw new Error(\"User not found\");\n          }\n\n          const isPasswordValid = await bcrypt.compare(\n            credentials.password,\n            user.password\n          );\n\n          if (!isPasswordValid) {\n            console.error(\"Invalid password for user:\", credentials.email);\n            throw new Error(\"Invalid password\");\n          }\n\n          console.log(\"User authenticated successfully:\", user.email);\n          return {\n            id: user.id.toString(),\n            email: user.email,\n            username: user.username\n          };\n        } catch (error) {\n          console.error(\"Authorization error:\", error);\n          throw new Error(\"Authentication failed\");\n        }\n      }\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n    }),\n  ],\n  pages: {\n    signIn: \"/auth/signin\",\n    signOut: \"/auth/signout\",\n    error: \"/auth/error\",\n  },\n  session: {\n    strategy: \"jwt\",\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n  debug: process.env.NODE_ENV === \"development\",\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        console.log(\"JWT callback with user:\", user.email);\n        token.id = user.id;\n        token.username = user.username;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        console.log(\"Session callback with token for user ID:\", token.id);\n        session.user.id = token.id;\n        session.user.username = token.username;\n      }\n      return session;\n    },\n    async redirect({ url, baseUrl }) {\n      console.log(\"Redirect callback, url:\", url, \"baseUrl:\", baseUrl);\n      // If the URL starts with the base URL, it's a relative URL\n      if (url.startsWith(baseUrl)) return url;\n      // Otherwise, make sure we only redirect to relative URLs or our own domain\n      if (url.startsWith(\"/\")) return `${baseUrl}${url}`;\n      return baseUrl;\n    }\n  },\n}; "],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,sJAAA,CAAA,gBAAa,AAAD,EAAE,sHAAA,CAAA,SAAM;IAC7B,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,QAAQ,KAAK,CAAC;oBACd,MAAM,IAAI,MAAM;gBAClB;gBAEA,IAAI;oBACF,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;wBACxC,OAAO;4BACL,OAAO,YAAY,KAAK;wBAC1B;oBACF;oBAEA,IAAI,CAAC,MAAM;wBACT,QAAQ,KAAK,CAAC,mBAAmB,YAAY,KAAK;wBAClD,MAAM,IAAI,MAAM;oBAClB;oBAEA,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,KAAK,QAAQ;oBAGf,IAAI,CAAC,iBAAiB;wBACpB,QAAQ,KAAK,CAAC,8BAA8B,YAAY,KAAK;wBAC7D,MAAM,IAAI,MAAM;oBAClB;oBAEA,QAAQ,GAAG,CAAC,oCAAoC,KAAK,KAAK;oBAC1D,OAAO;wBACL,IAAI,KAAK,EAAE,CAAC,QAAQ;wBACpB,OAAO,KAAK,KAAK;wBACjB,UAAU,KAAK,QAAQ;oBACzB;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,wBAAwB;oBACtC,MAAM,IAAI,MAAM;gBAClB;YACF;QACF;QACA,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;YAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;QACpD;KACD;IACD,OAAO;QACL,QAAQ;QACR,SAAS;QACT,OAAO;IACT;IACA,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,OAAO,oDAAyB;IAChC,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,QAAQ,GAAG,CAAC,2BAA2B,KAAK,KAAK;gBACjD,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,QAAQ,GAAG,KAAK,QAAQ;YAChC;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,GAAG,CAAC,4CAA4C,MAAM,EAAE;gBAChE,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,QAAQ,GAAG,MAAM,QAAQ;YACxC;YACA,OAAO;QACT;QACA,MAAM,UAAS,EAAE,GAAG,EAAE,OAAO,EAAE;YAC7B,QAAQ,GAAG,CAAC,2BAA2B,KAAK,YAAY;YACxD,2DAA2D;YAC3D,IAAI,IAAI,UAAU,CAAC,UAAU,OAAO;YACpC,2EAA2E;YAC3E,IAAI,IAAI,UAAU,CAAC,MAAM,OAAO,GAAG,UAAU,KAAK;YAClD,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/app/api/budgets/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\n\n// GET /api/budgets - Get all budgets for the current user\nexport async function GET() {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const userId = parseInt(session.user.id);\n    const now = new Date();\n    const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);\n    const startOfYear = new Date(now.getFullYear(), 0, 1);\n\n    // Get all active budgets\n    const budgets = await prisma.budget.findMany({\n      where: {\n        userId,\n        deletedAt: null,\n      },\n      include: {\n        category: {\n          select: {\n            name: true,\n            color: true,\n          },\n        },\n      },\n    });\n\n    // Calculate spent amounts for each budget\n    const budgetsWithSpent = await Promise.all(\n      budgets.map(async (budget) => {\n        const startDate = budget.period === 'monthly' ? startOfMonth : startOfYear;\n\n        const spent = await prisma.transaction.aggregate({\n          where: {\n            userId,\n            categoryId: budget.categoryId,\n            type: 'expense',\n            date: {\n              gte: startDate,\n            },\n            deletedAt: null,\n          },\n          _sum: {\n            amount: true,\n          },\n        });\n\n        return {\n          ...budget,\n          spent: spent._sum.amount || 0,\n        };\n      })\n    );\n\n    return NextResponse.json(budgetsWithSpent);\n  } catch (error) {\n    console.error('Error fetching budgets:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n}\n\n// POST /api/budgets - Create a new budget\nexport async function POST(request: Request) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const userId = parseInt(session.user.id);\n    if (isNaN(userId)) {\n      return NextResponse.json({ error: 'Invalid user ID' }, { status: 400 });\n    }\n\n    const data = await request.json();\n    console.log('Budget creation data:', data);\n\n    const { name, amount, period, categoryId } = data;\n\n    // Validate required fields\n    if (!amount || !period || !categoryId) {\n      return NextResponse.json(\n        { error: 'Missing required fields', \n          received: { name, amount, period, categoryId } \n        },\n        { status: 400 }\n      );\n    }\n\n    // Calculate start and end dates based on period\n    const now = new Date();\n    let startDate, endDate;\n    \n    if (period === 'monthly') {\n      startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n      endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n    } else if (period === 'yearly') {\n      startDate = new Date(now.getFullYear(), 0, 1);\n      endDate = new Date(now.getFullYear(), 11, 31);\n    } else {\n      return NextResponse.json(\n        { error: 'Invalid period. Must be \"monthly\" or \"yearly\"' },\n        { status: 400 }\n      );\n    }\n\n    // Check if a budget already exists for this category and period\n    const existingBudget = await prisma.budget.findFirst({\n      where: {\n        userId,\n        categoryId: parseInt(categoryId.toString()),\n        period,\n        deletedAt: null,\n      },\n    });\n\n    if (existingBudget) {\n      return NextResponse.json(\n        { error: 'A budget already exists for this category and period' },\n        { status: 400 }\n      );\n    }\n\n    const budget = await prisma.budget.create({\n      data: {\n        amount: parseFloat(amount.toString()),\n        period,\n        startDate,\n        endDate,\n        categoryId: parseInt(categoryId.toString()),\n        userId,\n        name: name || undefined, // Handle optional name field\n      },\n      include: {\n        category: {\n          select: {\n            name: true,\n            color: true,\n          },\n        },\n      },\n    });\n\n    return NextResponse.json(budget);\n  } catch (error) {\n    console.error('Error creating budget:', error);\n    return NextResponse.json(\n      { error: 'Internal server error', message: error instanceof Error ? error.message : String(error) },\n      { status: 500 }\n    );\n  }\n}\n\n// PUT /api/budgets - Update an existing budget\nexport async function PUT(request: Request) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const userId = parseInt(session.user.id);\n    if (isNaN(userId)) {\n      return NextResponse.json({ error: 'Invalid user ID' }, { status: 400 });\n    }\n\n    const data = await request.json();\n    console.log('Budget update data:', data);\n    \n    const { id, name, amount, period, categoryId } = data;\n\n    // Validate required fields\n    if (!id || !amount || !period || !categoryId) {\n      return NextResponse.json(\n        { error: 'Missing required fields' },\n        { status: 400 }\n      );\n    }\n\n    // Verify budget ownership\n    const existingBudget = await prisma.budget.findFirst({\n      where: {\n        id,\n        userId,\n        deletedAt: null,\n      },\n    });\n\n    if (!existingBudget) {\n      return NextResponse.json(\n        { error: 'Budget not found or unauthorized' },\n        { status: 404 }\n      );\n    }\n\n    // Calculate start and end dates based on period\n    const now = new Date();\n    let startDate, endDate;\n    \n    if (period === 'monthly') {\n      startDate = new Date(now.getFullYear(), now.getMonth(), 1);\n      endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);\n    } else if (period === 'yearly') {\n      startDate = new Date(now.getFullYear(), 0, 1);\n      endDate = new Date(now.getFullYear(), 11, 31);\n    } else {\n      return NextResponse.json(\n        { error: 'Invalid period. Must be \"monthly\" or \"yearly\"' },\n        { status: 400 }\n      );\n    }\n\n    // Check if updating would create a duplicate\n    if (\n      categoryId !== existingBudget.categoryId ||\n      period !== existingBudget.period\n    ) {\n      const duplicateBudget = await prisma.budget.findFirst({\n        where: {\n          userId,\n          categoryId: parseInt(categoryId.toString()),\n          period,\n          deletedAt: null,\n          NOT: {\n            id,\n          },\n        },\n      });\n\n      if (duplicateBudget) {\n        return NextResponse.json(\n          { error: 'A budget already exists for this category and period' },\n          { status: 400 }\n        );\n      }\n    }\n\n    const budget = await prisma.budget.update({\n      where: { id },\n      data: {\n        amount: parseFloat(amount.toString()),\n        period,\n        startDate,\n        endDate,\n        categoryId: parseInt(categoryId.toString()),\n        name: name || undefined,\n      },\n      include: {\n        category: {\n          select: {\n            name: true,\n            color: true,\n          },\n        },\n      },\n    });\n\n    return NextResponse.json(budget);\n  } catch (error) {\n    console.error('Error updating budget:', error);\n    return NextResponse.json(\n      { error: 'Internal server error', message: error instanceof Error ? error.message : String(error) },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}