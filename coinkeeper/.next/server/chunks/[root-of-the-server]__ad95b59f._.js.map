{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 158, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: [\"query\"],\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma; "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { prisma } from \"./prisma\";\nimport bcrypt from \"bcryptjs\";\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma) as any,\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          console.error(\"Invalid credentials provided\");\n          throw new Error(\"Invalid credentials\");\n        }\n\n        try {\n          const user = await prisma.user.findUnique({\n            where: {\n              email: credentials.email\n            }\n          });\n\n          if (!user) {\n            console.error(\"User not found:\", credentials.email);\n            throw new Error(\"User not found\");\n          }\n\n          const isPasswordValid = await bcrypt.compare(\n            credentials.password,\n            user.password\n          );\n\n          if (!isPasswordValid) {\n            console.error(\"Invalid password for user:\", credentials.email);\n            throw new Error(\"Invalid password\");\n          }\n\n          console.log(\"User authenticated successfully:\", user.email);\n          return {\n            id: user.id.toString(),\n            email: user.email,\n            username: user.username\n          };\n        } catch (error) {\n          console.error(\"Authorization error:\", error);\n          throw new Error(\"Authentication failed\");\n        }\n      }\n    }),\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n    }),\n  ],\n  pages: {\n    signIn: \"/auth/signin\",\n    signOut: \"/auth/signout\",\n    error: \"/auth/error\",\n  },\n  session: {\n    strategy: \"jwt\",\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n  debug: process.env.NODE_ENV === \"development\",\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        console.log(\"JWT callback with user:\", user.email);\n        token.id = user.id;\n        token.username = user.username;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        console.log(\"Session callback with token for user ID:\", token.id);\n        session.user.id = token.id;\n        session.user.username = token.username;\n      }\n      return session;\n    },\n    async redirect({ url, baseUrl }) {\n      console.log(\"Redirect callback, url:\", url, \"baseUrl:\", baseUrl);\n      // If the URL starts with the base URL, it's a relative URL\n      if (url.startsWith(baseUrl)) return url;\n      // Otherwise, make sure we only redirect to relative URLs or our own domain\n      if (url.startsWith(\"/\")) return `${baseUrl}${url}`;\n      return baseUrl;\n    }\n  },\n}; "],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,sJAAA,CAAA,gBAAa,AAAD,EAAE,sHAAA,CAAA,SAAM;IAC7B,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,QAAQ,KAAK,CAAC;oBACd,MAAM,IAAI,MAAM;gBAClB;gBAEA,IAAI;oBACF,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;wBACxC,OAAO;4BACL,OAAO,YAAY,KAAK;wBAC1B;oBACF;oBAEA,IAAI,CAAC,MAAM;wBACT,QAAQ,KAAK,CAAC,mBAAmB,YAAY,KAAK;wBAClD,MAAM,IAAI,MAAM;oBAClB;oBAEA,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,KAAK,QAAQ;oBAGf,IAAI,CAAC,iBAAiB;wBACpB,QAAQ,KAAK,CAAC,8BAA8B,YAAY,KAAK;wBAC7D,MAAM,IAAI,MAAM;oBAClB;oBAEA,QAAQ,GAAG,CAAC,oCAAoC,KAAK,KAAK;oBAC1D,OAAO;wBACL,IAAI,KAAK,EAAE,CAAC,QAAQ;wBACpB,OAAO,KAAK,KAAK;wBACjB,UAAU,KAAK,QAAQ;oBACzB;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,wBAAwB;oBACtC,MAAM,IAAI,MAAM;gBAClB;YACF;QACF;QACA,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;YAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;QACpD;KACD;IACD,OAAO;QACL,QAAQ;QACR,SAAS;QACT,OAAO;IACT;IACA,SAAS;QACP,UAAU;QACV,QAAQ,KAAK,KAAK,KAAK;IACzB;IACA,OAAO,oDAAyB;IAChC,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,QAAQ,GAAG,CAAC,2BAA2B,KAAK,KAAK;gBACjD,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,QAAQ,GAAG,KAAK,QAAQ;YAChC;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,GAAG,CAAC,4CAA4C,MAAM,EAAE;gBAChE,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,QAAQ,GAAG,MAAM,QAAQ;YACxC;YACA,OAAO;QACT;QACA,MAAM,UAAS,EAAE,GAAG,EAAE,OAAO,EAAE;YAC7B,QAAQ,GAAG,CAAC,2BAA2B,KAAK,YAAY;YACxD,2DAA2D;YAC3D,IAAI,IAAI,UAAU,CAAC,UAAU,OAAO;YACpC,2EAA2E;YAC3E,IAAI,IAAI,UAAU,CAAC,MAAM,OAAO,GAAG,UAAU,KAAK;YAClD,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 289, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/app/api/reports/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { authOptions } from '@/lib/auth';\nimport { prisma } from '@/lib/prisma';\nimport { addDays, subDays, format, parseISO, startOfMonth, endOfMonth } from 'date-fns';\n\ninterface Transaction {\n  id: number;\n  amount: number;\n  type: string;\n  date: Date;\n  category?: {\n    name: string;\n  };\n}\n\ninterface DailySummary {\n  date: string;\n  income: number;\n  expense: number;\n  net: number;\n}\n\ninterface CategorySummary {\n  name: string;\n  amount: number;\n  percentage: number;\n}\n\ninterface MonthlyComparison {\n  month: string;\n  income: number;\n  expense: number;\n  savings: number;\n  savingsRate: number;\n}\n\ninterface Goal {\n  id: number;\n  name: string;\n  targetAmount: number;\n  currentAmount: number;\n  deadline: Date | null;\n  description: string | null;\n  status: string;\n  progress: number;\n  daysLeft: number | null;\n}\n\n// GET /api/reports - Get financial analytics data\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user?.id) {\n      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });\n    }\n\n    const searchParams = new URL(request.url).searchParams;\n    const timeRange = parseInt(searchParams.get('timeRange') || '30');\n    const userId = parseInt(session.user.id);\n\n    const endDate = new Date();\n    const startDate = subDays(endDate, timeRange);\n\n    // Fetch transactions for the time range\n    const transactions = await prisma.transaction.findMany({\n      where: {\n        userId,\n        date: {\n          gte: startDate,\n          lte: endDate,\n        },\n      },\n      include: {\n        category: true,\n      },\n      orderBy: {\n        date: 'asc',\n      },\n    });\n\n    // Calculate daily summaries\n    const dailySummary: DailySummary[] = transactions.reduce((acc: DailySummary[], transaction) => {\n      const date = format(transaction.date, 'yyyy-MM-dd');\n      const existing = acc.find(item => item.date === date);\n\n      if (existing) {\n        if (transaction.type === 'income') {\n          existing.income += transaction.amount;\n        } else {\n          existing.expense += transaction.amount;\n        }\n        existing.net = existing.income - existing.expense;\n      } else {\n        acc.push({\n          date,\n          income: transaction.type === 'income' ? transaction.amount : 0,\n          expense: transaction.type === 'expense' ? transaction.amount : 0,\n          net: transaction.type === 'income' ? transaction.amount : -transaction.amount,\n        });\n      }\n\n      return acc;\n    }, []);\n\n    // Calculate category summaries\n    const categoryTotals = transactions.reduce<Record<string, number>>((acc, transaction) => {\n      const categoryName = transaction.category.name;\n      if (transaction.type === 'expense') {\n        acc[categoryName] = (acc[categoryName] || 0) + transaction.amount;\n      }\n      return acc;\n    }, {});\n\n    const totalExpenses = Object.values(categoryTotals).reduce((sum, amount) => sum + amount, 0);\n\n    const categorySummary: CategorySummary[] = Object.entries(categoryTotals).map(([name, amount]) => ({\n      name,\n      amount,\n      percentage: totalExpenses > 0 ? (amount / totalExpenses) * 100 : 0,\n    }));\n\n    // Calculate monthly comparisons\n    const monthlyComparison: MonthlyComparison[] = [];\n    let currentDate = startOfMonth(startDate);\n    const endOfPeriod = endOfMonth(endDate);\n\n    while (currentDate <= endOfPeriod) {\n      const monthEnd = endOfMonth(currentDate);\n      const monthTransactions = transactions.filter(\n        t => t.date >= currentDate && t.date <= monthEnd\n      );\n\n      const monthIncome = monthTransactions\n        .filter(t => t.type === 'income')\n        .reduce((sum, t) => sum + t.amount, 0);\n\n      const monthExpense = monthTransactions\n        .filter(t => t.type === 'expense')\n        .reduce((sum, t) => sum + t.amount, 0);\n\n      const savings = monthIncome - monthExpense;\n      const savingsRate = monthIncome > 0 ? (savings / monthIncome) * 100 : 0;\n\n      monthlyComparison.push({\n        month: format(currentDate, 'MMM yyyy'),\n        income: monthIncome,\n        expense: monthExpense,\n        savings,\n        savingsRate,\n      });\n\n      currentDate = addDays(monthEnd, 1);\n    }\n\n    // Fetch goals\n    const goals = await prisma.goal.findMany({\n      where: {\n        userId,\n      },\n      select: {\n        id: true,\n        name: true,\n        targetAmount: true,\n        currentAmount: true,\n        deadline: true,\n        description: true,\n        status: true,\n      },\n    });\n\n    // Calculate goal progress\n    const goalsWithProgress: Goal[] = goals.map(goal => {\n      const progress = (goal.currentAmount / goal.targetAmount) * 100;\n      const daysLeft = goal.deadline ? Math.ceil((parseISO(goal.deadline.toString()).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)) : null;\n\n      return {\n        ...goal,\n        progress,\n        daysLeft,\n      };\n    });\n\n    return NextResponse.json({\n      dailySummary,\n      categorySummary,\n      monthlyComparison,\n      goals: goalsWithProgress,\n    });\n  } catch (error) {\n    console.error('Error in reports API:', error);\n    return NextResponse.json(\n      { error: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":"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","debugId":null}}]
}