{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma =\n  globalForPrisma.prisma ??\n  new PrismaClient({\n    log: [\"query\"],\n  });\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma; "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 176, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import { PrismaAdapter } from \"@auth/prisma-adapter\";\nimport { NextAuthOptions } from \"next-auth\";\nimport NextAuth from \"next-auth/next\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport { prisma } from \"@/lib/prisma\";\nimport bcrypt from \"bcryptjs\";\n\nexport const authOptions: NextAuthOptions = {\n  adapter: PrismaAdapter(prisma),\n  providers: [\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          throw new Error(\"Invalid credentials\");\n        }\n\n        const user = await prisma.user.findUnique({\n          where: {\n            email: credentials.email\n          }\n        });\n\n        if (!user) {\n          throw new Error(\"User not found\");\n        }\n\n        const isPasswordValid = await bcrypt.compare(\n          credentials.password,\n          user.password\n        );\n\n        if (!isPasswordValid) {\n          throw new Error(\"Invalid password\");\n        }\n\n        return {\n          id: user.id.toString(),\n          email: user.email,\n          username: user.username\n        };\n      }\n    })\n  ],\n  session: {\n    strategy: \"jwt\"\n  },\n  pages: {\n    signIn: \"/auth/signin\",\n  },\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n        token.username = user.username;\n      }\n      return token;\n    },\n    async session({ session, token }) {\n      if (token) {\n        session.user.id = token.id;\n        session.user.username = token.username;\n      }\n      return session;\n    }\n  }\n};\n\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST }; "],"names":[],"mappings":";;;;;AAAA;AAEA;AACA;AACA;AACA;;;;;;;;;;AAEO,MAAM,cAA+B;IAC1C,SAAS,CAAA,GAAA,sJAAA,CAAA,gBAAa,AAAD,EAAE,sHAAA,CAAA,SAAM;IAC7B,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBACL,OAAO,YAAY,KAAK;oBAC1B;gBACF;gBAEA,IAAI,CAAC,MAAM;oBACT,MAAM,IAAI,MAAM;gBAClB;gBAEA,MAAM,kBAAkB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAC1C,YAAY,QAAQ,EACpB,KAAK,QAAQ;gBAGf,IAAI,CAAC,iBAAiB;oBACpB,MAAM,IAAI,MAAM;gBAClB;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE,CAAC,QAAQ;oBACpB,OAAO,KAAK,KAAK;oBACjB,UAAU,KAAK,QAAQ;gBACzB;YACF;QACF;KACD;IACD,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;IACV;IACA,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;gBAClB,MAAM,QAAQ,GAAG,KAAK,QAAQ;YAChC;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,OAAO;gBACT,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;gBAC1B,QAAQ,IAAI,CAAC,QAAQ,GAAG,MAAM,QAAQ;YACxC;YACA,OAAO;QACT;IACF;AACF;AAEA,MAAM,UAAU,CAAA,GAAA,+IAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}},
    {"offset": {"line": 266, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/app/api/dashboard/stats/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { getServerSession } from 'next-auth';\nimport { prisma } from '@/lib/prisma';\nimport { authOptions } from '@/app/api/auth/[...nextauth]/route';\n\nexport async function GET() {\n  try {\n    const session = await getServerSession(authOptions);\n\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { message: 'Unauthorized' },\n        { status: 401 }\n      );\n    }\n\n    const userId = parseInt(session.user.id);\n\n    // Get total balance from all accounts\n    const accounts = await prisma.account.findMany({\n      where: {\n        userId,\n        deletedAt: null,\n      },\n      select: {\n        balance: true,\n      },\n    });\n\n    const totalBalance = accounts.reduce((sum, account) => sum + account.balance, 0);\n\n    // Get transactions for income and expenses\n    const transactions = await prisma.transaction.findMany({\n      where: {\n        userId,\n        deletedAt: null,\n      },\n      include: {\n        category: true,\n      },\n      orderBy: {\n        date: 'desc',\n      },\n      take: 5, // Get only recent 5 transactions\n    });\n\n    // Calculate totals\n    const totalIncome = transactions\n      .filter(t => t.type === 'income')\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    const totalExpenses = transactions\n      .filter(t => t.type === 'expense')\n      .reduce((sum, t) => sum + t.amount, 0);\n\n    // Get expenses by category\n    const categories = await prisma.category.findMany({\n      where: {\n        userId,\n        type: 'expense',\n        deletedAt: null,\n      },\n      include: {\n        transactions: {\n          where: {\n            type: 'expense',\n            deletedAt: null,\n          },\n        },\n      },\n    });\n\n    const expensesByCategory = {\n      labels: categories.map(c => c.name),\n      data: categories.map(c => \n        c.transactions.reduce((sum, t) => sum + t.amount, 0)\n      ),\n      backgroundColor: categories.map(c => c.color || '#000000'),\n    };\n\n    // Format recent transactions\n    const recentTransactions = transactions.map(t => ({\n      id: t.id,\n      description: t.description,\n      amount: t.amount,\n      type: t.type,\n      category: t.category.name,\n      date: t.date,\n    }));\n\n    return NextResponse.json({\n      totalBalance,\n      totalIncome,\n      totalExpenses,\n      expensesByCategory,\n      recentTransactions,\n    });\n  } catch (error) {\n    console.error('Error fetching dashboard stats:', error);\n    return NextResponse.json(\n      { message: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;;;;;;;;;AAEO,eAAe;IACpB,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,uIAAA,CAAA,mBAAgB,AAAD,EAAE,0JAAA,CAAA,cAAW;QAElD,IAAI,CAAC,SAAS,MAAM,IAAI;YACtB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAe,GAC1B;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,SAAS,QAAQ,IAAI,CAAC,EAAE;QAEvC,sCAAsC;QACtC,MAAM,WAAW,MAAM,sHAAA,CAAA,SAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC7C,OAAO;gBACL;gBACA,WAAW;YACb;YACA,QAAQ;gBACN,SAAS;YACX;QACF;QAEA,MAAM,eAAe,SAAS,MAAM,CAAC,CAAC,KAAK,UAAY,MAAM,QAAQ,OAAO,EAAE;QAE9E,2CAA2C;QAC3C,MAAM,eAAe,MAAM,sHAAA,CAAA,SAAM,CAAC,WAAW,CAAC,QAAQ,CAAC;YACrD,OAAO;gBACL;gBACA,WAAW;YACb;YACA,SAAS;gBACP,UAAU;YACZ;YACA,SAAS;gBACP,MAAM;YACR;YACA,MAAM;QACR;QAEA,mBAAmB;QACnB,MAAM,cAAc,aACjB,MAAM,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,UACvB,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,EAAE,MAAM,EAAE;QAEtC,MAAM,gBAAgB,aACnB,MAAM,CAAC,CAAA,IAAK,EAAE,IAAI,KAAK,WACvB,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,EAAE,MAAM,EAAE;QAEtC,2BAA2B;QAC3B,MAAM,aAAa,MAAM,sHAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC;YAChD,OAAO;gBACL;gBACA,MAAM;gBACN,WAAW;YACb;YACA,SAAS;gBACP,cAAc;oBACZ,OAAO;wBACL,MAAM;wBACN,WAAW;oBACb;gBACF;YACF;QACF;QAEA,MAAM,qBAAqB;YACzB,QAAQ,WAAW,GAAG,CAAC,CAAA,IAAK,EAAE,IAAI;YAClC,MAAM,WAAW,GAAG,CAAC,CAAA,IACnB,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC,KAAK,IAAM,MAAM,EAAE,MAAM,EAAE;YAEpD,iBAAiB,WAAW,GAAG,CAAC,CAAA,IAAK,EAAE,KAAK,IAAI;QAClD;QAEA,6BAA6B;QAC7B,MAAM,qBAAqB,aAAa,GAAG,CAAC,CAAA,IAAK,CAAC;gBAChD,IAAI,EAAE,EAAE;gBACR,aAAa,EAAE,WAAW;gBAC1B,QAAQ,EAAE,MAAM;gBAChB,MAAM,EAAE,IAAI;gBACZ,UAAU,EAAE,QAAQ,CAAC,IAAI;gBACzB,MAAM,EAAE,IAAI;YACd,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB;YACA;YACA;YACA;YACA;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mCAAmC;QACjD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}