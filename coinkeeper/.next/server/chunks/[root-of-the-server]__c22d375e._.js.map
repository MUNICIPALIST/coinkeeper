{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client';\n\nconst globalForPrisma = globalThis as unknown as {\n  prisma: PrismaClient | undefined;\n};\n\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\n\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma; "],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6HAAA,CAAA,eAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/app/api/auth/register/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { prisma } from '@/lib/prisma';\nimport bcrypt from 'bcryptjs';\n\nexport async function POST(request: Request) {\n  try {\n    const { username, email, password } = await request.json();\n\n    // Validate input\n    if (!username || !email || !password) {\n      return NextResponse.json(\n        { message: 'Missing required fields' },\n        { status: 400 }\n      );\n    }\n\n    // Check if user already exists\n    const existingUser = await prisma.user.findFirst({\n      where: {\n        OR: [\n          { email },\n          { username },\n        ],\n      },\n    });\n\n    if (existingUser) {\n      return NextResponse.json(\n        { message: 'User with this email or username already exists' },\n        { status: 400 }\n      );\n    }\n\n    // Hash password\n    const hashedPassword = await bcrypt.hash(password, 10);\n\n    // Create user\n    const user = await prisma.user.create({\n      data: {\n        username,\n        email,\n        password: hashedPassword,\n      },\n    });\n\n    // Create default categories for the user\n    const defaultCategories = [\n      { name: 'Salary', type: 'income', icon: 'work', color: '#4CAF50' },\n      { name: 'Investments', type: 'income', icon: 'trending_up', color: '#2196F3' },\n      { name: 'Gifts', type: 'income', icon: 'card_giftcard', color: '#9C27B0' },\n      { name: 'Food & Dining', type: 'expense', icon: 'restaurant', color: '#F44336' },\n      { name: 'Transportation', type: 'expense', icon: 'directions_car', color: '#FF9800' },\n      { name: 'Housing', type: 'expense', icon: 'home', color: '#795548' },\n      { name: 'Utilities', type: 'expense', icon: 'power', color: '#607D8B' },\n      { name: 'Shopping', type: 'expense', icon: 'shopping_cart', color: '#E91E63' },\n      { name: 'Entertainment', type: 'expense', icon: 'movie', color: '#673AB7' },\n      { name: 'Health', type: 'expense', icon: 'local_hospital', color: '#00BCD4' },\n      { name: 'Education', type: 'expense', icon: 'school', color: '#3F51B5' },\n      { name: 'Personal Care', type: 'expense', icon: 'spa', color: '#8BC34A' },\n      { name: 'Travel', type: 'expense', icon: 'flight', color: '#FF5722' },\n      { name: 'Debt Payments', type: 'expense', icon: 'money_off', color: '#9E9E9E' },\n      { name: 'Other', type: 'expense', icon: 'more_horiz', color: '#BDBDBD' },\n    ];\n\n    await prisma.category.createMany({\n      data: defaultCategories.map(category => ({\n        ...category,\n        userId: user.id,\n      })),\n    });\n\n    return NextResponse.json(\n      { message: 'User created successfully' },\n      { status: 201 }\n    );\n  } catch (error) {\n    console.error('Registration error:', error);\n    return NextResponse.json(\n      { message: 'Internal server error' },\n      { status: 500 }\n    );\n  }\n} "],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAExD,iBAAiB;QACjB,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,UAAU;YACpC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAA0B,GACrC;gBAAE,QAAQ;YAAI;QAElB;QAEA,+BAA+B;QAC/B,MAAM,eAAe,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YAC/C,OAAO;gBACL,IAAI;oBACF;wBAAE;oBAAM;oBACR;wBAAE;oBAAS;iBACZ;YACH;QACF;QAEA,IAAI,cAAc;YAChB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;YAAkD,GAC7D;gBAAE,QAAQ;YAAI;QAElB;QAEA,gBAAgB;QAChB,MAAM,iBAAiB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;QAEnD,cAAc;QACd,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,MAAM;gBACJ;gBACA;gBACA,UAAU;YACZ;QACF;QAEA,yCAAyC;QACzC,MAAM,oBAAoB;YACxB;gBAAE,MAAM;gBAAU,MAAM;gBAAU,MAAM;gBAAQ,OAAO;YAAU;YACjE;gBAAE,MAAM;gBAAe,MAAM;gBAAU,MAAM;gBAAe,OAAO;YAAU;YAC7E;gBAAE,MAAM;gBAAS,MAAM;gBAAU,MAAM;gBAAiB,OAAO;YAAU;YACzE;gBAAE,MAAM;gBAAiB,MAAM;gBAAW,MAAM;gBAAc,OAAO;YAAU;YAC/E;gBAAE,MAAM;gBAAkB,MAAM;gBAAW,MAAM;gBAAkB,OAAO;YAAU;YACpF;gBAAE,MAAM;gBAAW,MAAM;gBAAW,MAAM;gBAAQ,OAAO;YAAU;YACnE;gBAAE,MAAM;gBAAa,MAAM;gBAAW,MAAM;gBAAS,OAAO;YAAU;YACtE;gBAAE,MAAM;gBAAY,MAAM;gBAAW,MAAM;gBAAiB,OAAO;YAAU;YAC7E;gBAAE,MAAM;gBAAiB,MAAM;gBAAW,MAAM;gBAAS,OAAO;YAAU;YAC1E;gBAAE,MAAM;gBAAU,MAAM;gBAAW,MAAM;gBAAkB,OAAO;YAAU;YAC5E;gBAAE,MAAM;gBAAa,MAAM;gBAAW,MAAM;gBAAU,OAAO;YAAU;YACvE;gBAAE,MAAM;gBAAiB,MAAM;gBAAW,MAAM;gBAAO,OAAO;YAAU;YACxE;gBAAE,MAAM;gBAAU,MAAM;gBAAW,MAAM;gBAAU,OAAO;YAAU;YACpE;gBAAE,MAAM;gBAAiB,MAAM;gBAAW,MAAM;gBAAa,OAAO;YAAU;YAC9E;gBAAE,MAAM;gBAAS,MAAM;gBAAW,MAAM;gBAAc,OAAO;YAAU;SACxE;QAED,MAAM,sHAAA,CAAA,SAAM,CAAC,QAAQ,CAAC,UAAU,CAAC;YAC/B,MAAM,kBAAkB,GAAG,CAAC,CAAA,WAAY,CAAC;oBACvC,GAAG,QAAQ;oBACX,QAAQ,KAAK,EAAE;gBACjB,CAAC;QACH;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAA4B,GACvC;YAAE,QAAQ;QAAI;IAElB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;QAAwB,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}