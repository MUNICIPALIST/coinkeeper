{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/providers/auth-provider.tsx"],"sourcesContent":["'use client';\n\nimport { SessionProvider } from \"next-auth/react\";\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  return <SessionProvider>{children}</SessionProvider>;\n} "],"names":[],"mappings":";;;;AAEA;AAFA;;;AAIO,SAAS,aAAa,EAAE,QAAQ,EAAiC;IACtE,qBAAO,8OAAC,8IAAA,CAAA,kBAAe;kBAAE;;;;;;AAC3B","debugId":null}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/providers/theme-provider.tsx"],"sourcesContent":["'use client';\n\nimport { ThemeProvider as MUIThemeProvider, createTheme } from '@mui/material';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { createContext, useEffect, useState, useContext } from 'react';\n\ntype Theme = 'light' | 'dark' | 'system';\n\ninterface ThemeContextProps {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n}\n\nconst ThemeContext = createContext<ThemeContextProps | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>('light');\n  const [mounted, setMounted] = useState(false);\n  const [mode, setMode] = useState<'light' | 'dark'>('light');\n\n  useEffect(() => {\n    // Set mounted to true when component mounts\n    setMounted(true);\n    \n    // Load theme from localStorage if available\n    const savedTheme = localStorage.getItem('theme') as Theme;\n    if (savedTheme) {\n      setTheme(savedTheme);\n      applyTheme(savedTheme);\n    } else {\n      // Default to system preference\n      setTheme('system');\n      applyTheme('system');\n    }\n  }, []);\n\n  const applyTheme = (selectedTheme: Theme) => {\n    const root = document.documentElement;\n    \n    // Remove existing theme classes\n    root.classList.remove('dark-theme', 'light-theme', 'system-theme');\n    \n    let newMode: 'light' | 'dark' = 'light';\n    \n    if (selectedTheme === 'dark') {\n      root.classList.add('dark-theme');\n      newMode = 'dark';\n    } else if (selectedTheme === 'light') {\n      root.classList.add('light-theme');\n      newMode = 'light';\n    } else if (selectedTheme === 'system') {\n      // Check system preference\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\n      if (prefersDark) {\n        root.classList.add('dark-theme');\n        newMode = 'dark';\n      } else {\n        root.classList.add('light-theme');\n        newMode = 'light';\n      }\n      root.classList.add('system-theme');\n    }\n    \n    setMode(newMode);\n  };\n\n  const setThemeValue = (newTheme: Theme) => {\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    applyTheme(newTheme);\n  };\n\n  // Create MUI theme based on current mode\n  const muiTheme = createTheme({\n    palette: {\n      mode: mode,\n      primary: {\n        main: mode === 'light' ? '#1976d2' : '#90caf9',\n      },\n      secondary: {\n        main: mode === 'light' ? '#dc004e' : '#f48fb1',\n      },\n      background: {\n        default: mode === 'light' ? '#ffffff' : '#121212',\n        paper: mode === 'light' ? '#ffffff' : '#1e1e1e',\n      },\n      text: {\n        primary: mode === 'light' ? 'rgba(0, 0, 0, 0.87)' : 'rgba(255, 255, 255, 0.87)',\n        secondary: mode === 'light' ? 'rgba(0, 0, 0, 0.6)' : 'rgba(255, 255, 255, 0.6)',\n      },\n    },\n  });\n\n  // Prevent flash of unstyled content\n  if (!mounted) {\n    return <>{children}</>;\n  }\n\n  return (\n    <ThemeContext.Provider value={{ theme, setTheme: setThemeValue }}>\n      <MUIThemeProvider theme={muiTheme}>\n        <CssBaseline />\n        {children}\n      </MUIThemeProvider>\n    </ThemeContext.Provider>\n  );\n}\n\n// Custom hook for using the theme context\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n} "],"names":[],"mappings":";;;;;AAEA;AAAA;AACA;AACA;AAJA;;;;;AAaA,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAAiC;AAE3D,SAAS,cAAc,EAAE,QAAQ,EAAiC;IACvE,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAS;IAC1C,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAoB;IAEnD,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,4CAA4C;QAC5C,WAAW;QAEX,4CAA4C;QAC5C,MAAM,aAAa,aAAa,OAAO,CAAC;QACxC,IAAI,YAAY;YACd,SAAS;YACT,WAAW;QACb,OAAO;YACL,+BAA+B;YAC/B,SAAS;YACT,WAAW;QACb;IACF,GAAG,EAAE;IAEL,MAAM,aAAa,CAAC;QAClB,MAAM,OAAO,SAAS,eAAe;QAErC,gCAAgC;QAChC,KAAK,SAAS,CAAC,MAAM,CAAC,cAAc,eAAe;QAEnD,IAAI,UAA4B;QAEhC,IAAI,kBAAkB,QAAQ;YAC5B,KAAK,SAAS,CAAC,GAAG,CAAC;YACnB,UAAU;QACZ,OAAO,IAAI,kBAAkB,SAAS;YACpC,KAAK,SAAS,CAAC,GAAG,CAAC;YACnB,UAAU;QACZ,OAAO,IAAI,kBAAkB,UAAU;YACrC,0BAA0B;YAC1B,MAAM,cAAc,OAAO,UAAU,CAAC,gCAAgC,OAAO;YAC7E,IAAI,aAAa;gBACf,KAAK,SAAS,CAAC,GAAG,CAAC;gBACnB,UAAU;YACZ,OAAO;gBACL,KAAK,SAAS,CAAC,GAAG,CAAC;gBACnB,UAAU;YACZ;YACA,KAAK,SAAS,CAAC,GAAG,CAAC;QACrB;QAEA,QAAQ;IACV;IAEA,MAAM,gBAAgB,CAAC;QACrB,SAAS;QACT,aAAa,OAAO,CAAC,SAAS;QAC9B,WAAW;IACb;IAEA,yCAAyC;IACzC,MAAM,WAAW,CAAA,GAAA,2MAAA,CAAA,cAAW,AAAD,EAAE;QAC3B,SAAS;YACP,MAAM;YACN,SAAS;gBACP,MAAM,SAAS,UAAU,YAAY;YACvC;YACA,WAAW;gBACT,MAAM,SAAS,UAAU,YAAY;YACvC;YACA,YAAY;gBACV,SAAS,SAAS,UAAU,YAAY;gBACxC,OAAO,SAAS,UAAU,YAAY;YACxC;YACA,MAAM;gBACJ,SAAS,SAAS,UAAU,wBAAwB;gBACpD,WAAW,SAAS,UAAU,uBAAuB;YACvD;QACF;IACF;IAEA,oCAAoC;IACpC,IAAI,CAAC,SAAS;QACZ,qBAAO;sBAAG;;IACZ;IAEA,qBACE,8OAAC,aAAa,QAAQ;QAAC,OAAO;YAAE;YAAO,UAAU;QAAc;kBAC7D,cAAA,8OAAC,+MAAA,CAAA,gBAAgB;YAAC,OAAO;;8BACvB,8OAAC,sKAAA,CAAA,UAAW;;;;;gBACX;;;;;;;;;;;;AAIT;AAGO,SAAS;IACd,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT","debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/providers/providers.tsx"],"sourcesContent":["'use client';\n\nimport { SessionProvider } from 'next-auth/react';\nimport { AuthProvider } from './auth-provider';\nimport { ThemeProvider } from './theme-provider';\n\nexport default function Providers({ children }: { children: React.ReactNode }) {\n  return (\n    <SessionProvider>\n      <AuthProvider>\n        <ThemeProvider>\n          {children}\n        </ThemeProvider>\n      </AuthProvider>\n    </SessionProvider>\n  );\n} "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMe,SAAS,UAAU,EAAE,QAAQ,EAAiC;IAC3E,qBACE,8OAAC,8IAAA,CAAA,kBAAe;kBACd,cAAA,8OAAC,qIAAA,CAAA,eAAY;sBACX,cAAA,8OAAC,sIAAA,CAAA,gBAAa;0BACX;;;;;;;;;;;;;;;;AAKX","debugId":null}}]
}