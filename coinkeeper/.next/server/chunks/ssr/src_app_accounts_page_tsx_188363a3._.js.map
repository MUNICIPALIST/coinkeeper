{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/app/accounts/page.tsx"],"sourcesContent":["// @ts-nocheck\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useSession } from 'next-auth/react';\nimport { useLanguage } from '@/providers/language-provider';\nimport DashboardLayout from '@/components/layouts/dashboard-layout';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport TextField from '@mui/material/TextField';\nimport MenuItem from '@mui/material/MenuItem';\nimport IconButton from '@mui/material/IconButton';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n} from '@mui/icons-material';\n\ninterface Account {\n  id: number;\n  name: string;\n  balance: number;\n  currency: string;\n  description?: string;\n}\n\nconst currencies = ['USD', 'EUR', 'GBP', 'JPY', 'RUB', 'KZT'];\n\nexport default function AccountsPage() {\n  const { data: session } = useSession();\n  const { t } = useLanguage();\n  const [accounts, setAccounts] = useState<Account[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [editingAccount, setEditingAccount] = useState<Account | null>(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    balance: '',\n    currency: 'USD',\n    description: '',\n  });\n\n  useEffect(() => {\n    fetchAccounts();\n  }, []);\n\n  const fetchAccounts = async () => {\n    try {\n      const response = await fetch('/api/accounts');\n      const data = await response.json();\n      setAccounts(data);\n    } catch (error) {\n      console.error('Error fetching accounts:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleOpenDialog = (account?: Account) => {\n    if (account) {\n      setEditingAccount(account);\n      setFormData({\n        name: account.name,\n        balance: account.balance.toString(),\n        currency: account.currency,\n        description: account.description || '',\n      });\n    } else {\n      setEditingAccount(null);\n      setFormData({\n        name: '',\n        balance: '',\n        currency: 'USD',\n        description: '',\n      });\n    }\n    setOpenDialog(true);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n    setEditingAccount(null);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const response = await fetch('/api/accounts', {\n        method: editingAccount ? 'PUT' : 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...(editingAccount && { id: editingAccount.id }),\n          name: formData.name,\n          balance: parseFloat(formData.balance),\n          currency: formData.currency,\n          description: formData.description,\n        }),\n      });\n\n      if (response.ok) {\n        handleCloseDialog();\n        fetchAccounts();\n      }\n    } catch (error) {\n      console.error('Error saving account:', error);\n    }\n  };\n\n  const handleDelete = async (id: number) => {\n    if (window.confirm(t('accounts.delete_confirmation'))) {\n      try {\n        const response = await fetch(`/api/accounts/${id}`, {\n          method: 'DELETE',\n        });\n\n        if (response.ok) {\n          fetchAccounts();\n        }\n      } catch (error) {\n        console.error('Error deleting account:', error);\n      }\n    }\n  };\n\n  if (loading) {\n    return (\n      <DashboardLayout>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\n          <CircularProgress />\n        </Box>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout>\n      <Box className=\"content-container\" sx={{ py: 3 }}>\n        <Box className=\"page-title-container\">\n          <Typography variant=\"h4\">{t('accounts.title')}</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => handleOpenDialog()}\n            className=\"add-button\"\n          >\n            {t('accounts.add_account')}\n          </Button>\n        </Box>\n\n        <Box className=\"accounts-grid\">\n          {accounts.length === 0 ? (\n            <Box className=\"empty-state\" sx={{ gridColumn: '1 / -1' }}>\n              <Typography variant=\"h6\" className=\"empty-state-title\">{t('accounts.no_accounts')}</Typography>\n              <Button \n                variant=\"contained\" \n                startIcon={<AddIcon />}\n                onClick={() => handleOpenDialog()}\n                sx={{ mt: 2 }}\n              >\n                {t('accounts.add_account')}\n              </Button>\n            </Box>\n          ) : (\n            accounts.map((account) => (\n              <Paper className=\"account-card\" key={account.id}>\n                <Box position=\"relative\" p={2}>\n                  <Typography variant=\"h6\">{account.name}</Typography>\n                  <Typography variant=\"h4\" color=\"primary\">\n                    {account.currency} {account.balance.toFixed(2)}\n                  </Typography>\n                  {account.description && (\n                    <Typography color=\"text.secondary\" mt={1}>\n                      {account.description}\n                    </Typography>\n                  )}\n                  <Box className=\"actions-container\">\n                    <IconButton onClick={() => handleOpenDialog(account)} size=\"small\">\n                      <EditIcon />\n                    </IconButton>\n                    <IconButton onClick={() => handleDelete(account.id)} size=\"small\" color=\"error\">\n                      <DeleteIcon />\n                    </IconButton>\n                  </Box>\n                </Box>\n              </Paper>\n            ))\n          )}\n        </Box>\n\n        <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth=\"sm\" fullWidth>\n          <DialogTitle>\n            {editingAccount ? t('accounts.edit_account') : t('accounts.add_account')}\n          </DialogTitle>\n          <DialogContent>\n            <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 2 }}>\n              <TextField\n                fullWidth\n                label={t('accounts.name')}\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                margin=\"normal\"\n                required\n              />\n              <TextField\n                fullWidth\n                label={t('accounts.balance')}\n                type=\"number\"\n                value={formData.balance}\n                onChange={(e) => setFormData({ ...formData, balance: e.target.value })}\n                margin=\"normal\"\n                required\n              />\n              <TextField\n                fullWidth\n                select\n                label={t('accounts.currency')}\n                value={formData.currency}\n                onChange={(e) => setFormData({ ...formData, currency: e.target.value })}\n                margin=\"normal\"\n                required\n              >\n                {currencies.map((currency) => (\n                  <MenuItem key={currency} value={currency}>\n                    {currency}\n                  </MenuItem>\n                ))}\n              </TextField>\n              <TextField\n                fullWidth\n                label={t('description')}\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                margin=\"normal\"\n                multiline\n                rows={3}\n              />\n            </Box>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleCloseDialog}>{t('cancel')}</Button>\n            <Button type=\"submit\" onClick={handleSubmit} variant=\"contained\">\n              {editingAccount ? t('save') : t('add')}\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Box>\n    </DashboardLayout>\n  );\n} "],"names":[],"mappings":"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","debugId":null}}]
}