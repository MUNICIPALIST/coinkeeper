{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/app/dashboard/page.tsx"],"sourcesContent":["'use client';\n\nimport { Box, Typography, Paper, IconButton, CircularProgress, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Chip } from '@mui/material';\nimport { useState, useEffect } from 'react';\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport DashboardLayout from '@/components/layouts/dashboard-layout';\nimport { useLanguage } from '@/providers/language-provider';\n\ninterface Account {\n  id: number;\n  name: string;\n  balance: number;\n  currency: string;\n  description?: string;\n}\n\ninterface Transaction {\n  id: number;\n  description: string;\n  amount: number;\n  type: 'income' | 'expense' | 'transfer';\n  date: string;\n  category: {\n    name: string;\n    color: string;\n  };\n  account: {\n    name: string;\n    currency: string;\n  };\n}\n\ninterface Category {\n  id: number;\n  name: string;\n  type: 'income' | 'expense';\n  color: string;\n}\n\nexport default function DashboardPage() {\n  const { t } = useLanguage();\n  const [accounts, setAccounts] = useState<Account[]>([]);\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [isRefreshing, setIsRefreshing] = useState(false);\n  const [loading, setLoading] = useState(true);\n\n  // Calculated values from real data\n  const totalBalance = accounts.reduce((sum, account) => sum + account.balance, 0);\n  const totalIncome = transactions\n    .filter(transaction => transaction.type === 'income')\n    .reduce((sum, transaction) => sum + transaction.amount, 0);\n  const totalExpenses = transactions\n    .filter(transaction => transaction.type === 'expense')\n    .reduce((sum, transaction) => sum + Math.abs(transaction.amount), 0);\n\n  useEffect(() => {\n    fetchAllData();\n  }, []);\n\n  const fetchAllData = async () => {\n    setLoading(true);\n    try {\n      await Promise.all([\n        fetchAccounts(),\n        fetchTransactions(),\n        fetchCategories()\n      ]);\n    } catch (error) {\n      console.error('Error fetching dashboard data:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchAccounts = async () => {\n    try {\n      const response = await fetch('/api/accounts');\n      const data = await response.json();\n      setAccounts(data);\n      return data;\n    } catch (error) {\n      console.error('Error fetching accounts:', error);\n      return [];\n    }\n  };\n\n  const fetchTransactions = async () => {\n    try {\n      // Get the latest 10 transactions\n      const response = await fetch('/api/transactions?limit=10&page=1');\n      const data = await response.json();\n      \n      if (data.transactions && Array.isArray(data.transactions)) {\n        setTransactions(data.transactions);\n        return data.transactions;\n      } else {\n        setTransactions([]);\n        return [];\n      }\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      setTransactions([]);\n      return [];\n    }\n  };\n\n  const fetchCategories = async () => {\n    try {\n      const response = await fetch('/api/categories');\n      const data = await response.json();\n      setCategories(data);\n      return data;\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      return [];\n    }\n  };\n\n  const handleRefresh = async () => {\n    setIsRefreshing(true);\n    await fetchAllData();\n    setIsRefreshing(false);\n  };\n\n  // Function to translate category names\n  const getTranslatedCategoryName = (name) => {\n    if (!name) return 'N/A';\n    \n    // Convert category name to lowercase and handle special cases\n    let key = name.toLowerCase().replace(/[&\\s]+/g, '_');\n    \n    // Special case for categories with hardcoded names that don't match our keys\n    if (key === 'food_&_dining') key = 'food_dining';\n    if (key === 'debt_payments') key = 'debt_payments';\n    \n    // Try to get direct translation for the category\n    const translationKey = `categories.${key}`;\n    const directTranslation = t(translationKey);\n    \n    // If key is returned, it means no translation was found\n    if (directTranslation === translationKey) {\n      return name; // Return original name\n    }\n    \n    return directTranslation;\n  };\n\n  if (loading) {\n    return (\n      <DashboardLayout>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\n          <CircularProgress />\n        </Box>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout>\n      <Box className=\"content-container\" sx={{ py: 3 }}>\n        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }} className=\"welcome-section\">\n          <Box className=\"page-title-container\">\n            <Typography variant=\"h4\" className=\"welcome-title\">\n              {t('dashboard.welcome_back')}\n            </Typography>\n            <Typography variant=\"subtitle1\" sx={{ mt: 1, opacity: 0.7 }}>\n              {t('dashboard.financial_overview')}\n            </Typography>\n          </Box>\n          <IconButton \n            onClick={handleRefresh} \n            aria-label=\"refresh data\" \n            className={`refresh-button ${isRefreshing ? 'rotating' : ''}`}\n            disabled={isRefreshing}\n          >\n            <RefreshIcon />\n          </IconButton>\n        </Box>\n        \n        <Box sx={{ display: 'grid', gridTemplateColumns: { xs: '1fr', md: 'repeat(3, 1fr)' }, gap: 3 }}>\n          <Paper className=\"dashboard-card balance-card\">\n            <Typography variant=\"h6\">{t('dashboard.total_balance')}</Typography>\n            <Typography variant=\"h4\">{totalBalance.toLocaleString()} {accounts.length > 0 ? accounts[0]?.currency : ''}</Typography>\n          </Paper>\n\n          <Paper className=\"dashboard-card income-card\">\n            <Typography variant=\"h6\">{t('dashboard.income')}</Typography>\n            <Typography variant=\"h4\">{totalIncome.toLocaleString()} {accounts.length > 0 ? accounts[0]?.currency : ''}</Typography>\n          </Paper>\n\n          <Paper className=\"dashboard-card expense-card\">\n            <Typography variant=\"h6\">{t('dashboard.expenses')}</Typography>\n            <Typography variant=\"h4\">{totalExpenses.toLocaleString()} {accounts.length > 0 ? accounts[0]?.currency : ''}</Typography>\n          </Paper>\n        </Box>\n\n        <Box sx={{ mt: 4 }}>\n          <Paper className=\"overview-card\" sx={{ p: 3 }}>\n            <Typography variant=\"h6\" className=\"section-header\">{t('dashboard.spending_overview')}</Typography>\n            {categories.filter(cat => cat.type === 'expense').length > 0 ? (\n              <Box className=\"chart-container\" sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mt: 2 }}>\n                {categories\n                  .filter(cat => cat.type === 'expense')\n                  .map(category => {\n                    const categoryTransactions = transactions.filter(\n                      t => t.category?.name?.toLowerCase() === category.name.toLowerCase()\n                    );\n                    const categoryTotal = categoryTransactions.reduce(\n                      (sum, t) => sum + Math.abs(t.amount), 0\n                    );\n                    \n                    return categoryTotal > 0 ? (\n                      <Box \n                        key={category.id} \n                        sx={{ \n                          border: '1px solid #eee', \n                          borderRadius: '8px', \n                          padding: '10px', \n                          width: '120px',\n                          background: `linear-gradient(135deg, white 80%, ${category.color} 100%)`\n                        }}\n                      >\n                        <Typography variant=\"body2\" fontWeight=\"bold\">\n                          {getTranslatedCategoryName(category.name)}\n                        </Typography>\n                        <Typography variant=\"body1\">\n                          {categoryTotal.toLocaleString()} {accounts[0]?.currency}\n                        </Typography>\n                      </Box>\n                    ) : null;\n                  }).filter(Boolean)\n                }\n              </Box>\n            ) : (\n              <Typography variant=\"body2\" className=\"chart-placeholder\" sx={{ p: 3, textAlign: 'center' }}>\n                {t('dashboard.spending_patterns')}\n              </Typography>\n            )}\n          </Paper>\n        </Box>\n\n        <Box sx={{ mt: 3 }}>\n          <Paper className=\"overview-card\" sx={{ p: 3 }}>\n            <Typography variant=\"h6\" className=\"section-header\">{t('dashboard.recent_transactions')}</Typography>\n            {transactions.length > 0 ? (\n              <TableContainer>\n                <Table size=\"small\">\n                  <TableHead>\n                    <TableRow>\n                      <TableCell>{t('transactions.date')}</TableCell>\n                      <TableCell>{t('transactions.description')}</TableCell>\n                      <TableCell>{t('transactions.category')}</TableCell>\n                      <TableCell align=\"right\">{t('transactions.amount')}</TableCell>\n                      <TableCell>{t('transactions.type')}</TableCell>\n                    </TableRow>\n                  </TableHead>\n                  <TableBody>\n                    {transactions.slice(0, 5).map((transaction) => (\n                      <TableRow key={transaction.id} hover>\n                        <TableCell>\n                          {new Date(transaction.date).toLocaleDateString()}\n                        </TableCell>\n                        <TableCell>{transaction.description}</TableCell>\n                        <TableCell>\n                          <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>\n                            <Box\n                              sx={{ \n                                width: 12, \n                                height: 12, \n                                borderRadius: '50%', \n                                backgroundColor: transaction.category?.color || '#ccc' \n                              }}\n                            />\n                            {transaction.category ? getTranslatedCategoryName(transaction.category.name) : 'N/A'}\n                          </Box>\n                        </TableCell>\n                        <TableCell align=\"right\" sx={{ color: transaction.type === 'income' ? 'green' : 'red' }}>\n                          {transaction.account?.currency || ''} {Math.abs(transaction.amount).toFixed(2)}\n                        </TableCell>\n                        <TableCell>\n                          <Chip \n                            label={t(`transactions.${transaction.type}`)} \n                            size=\"small\" \n                            sx={{ \n                              backgroundColor: transaction.type === 'income' ? '#e6f7eb' : '#ffebee', \n                              color: transaction.type === 'income' ? '#2e7d32' : '#c62828',\n                              fontSize: '0.7rem'\n                            }}\n                          />\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              </TableContainer>\n            ) : (\n              <Box className=\"transactions-list\" sx={{ p: 3, textAlign: 'center' }}>\n                <Typography variant=\"body2\" className=\"transactions-placeholder\">\n                  {t('dashboard.transactions_appear')}\n                </Typography>\n              </Box>\n            )}\n          </Paper>\n        </Box>\n      </Box>\n    </DashboardLayout>\n  );\n} "],"names":[],"mappings":"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","debugId":null}}]
}