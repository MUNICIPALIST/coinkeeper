{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/app/transactions/page.tsx"],"sourcesContent":["// @ts-nocheck\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useSession } from 'next-auth/react';\nimport DashboardLayout from '@/components/layouts/dashboard-layout';\nimport { useLanguage } from '@/providers/language-provider';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport TextField from '@mui/material/TextField';\nimport MenuItem from '@mui/material/MenuItem';\nimport IconButton from '@mui/material/IconButton';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport TablePagination from '@mui/material/TablePagination';\nimport Chip from '@mui/material/Chip';\nimport Grid from '@mui/material/Grid';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n} from '@mui/icons-material';\n\ninterface Transaction {\n  id: number;\n  description: string;\n  amount: number;\n  type: 'income' | 'expense' | 'transfer';\n  date: string;\n  categoryId: number;\n  accountId: number;\n  category: {\n    name: string;\n    color: string;\n  };\n  account: {\n    name: string;\n    currency: string;\n  };\n}\n\ninterface Category {\n  id: number;\n  name: string;\n  type: 'income' | 'expense';\n  color: string;\n}\n\ninterface Account {\n  id: number;\n  name: string;\n  currency: string;\n}\n\ninterface PaginationInfo {\n  total: number;\n  page: number;\n  limit: number;\n  totalPages: number;\n}\n\nexport default function TransactionsPage() {\n  const { data: session } = useSession();\n  const { t } = useLanguage();\n  const [transactions, setTransactions] = useState<Transaction[]>([]);\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [accounts, setAccounts] = useState<Account[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [editingTransaction, setEditingTransaction] = useState<Transaction | null>(null);\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const [totalCount, setTotalCount] = useState(0);\n  const [formData, setFormData] = useState({\n    description: '',\n    amount: '',\n    type: 'expense',\n    date: new Date().toISOString().split('T')[0],\n    categoryId: '',\n    accountId: '',\n    toAccountId: '', // For transfers\n  });\n\n  // Transaction types with translations\n  const transactionTypes = [\n    { value: 'income', label: t('transactions.income') },\n    { value: 'expense', label: t('transactions.expense') },\n    { value: 'transfer', label: t('transactions.transfer') },\n  ];\n\n  useEffect(() => {\n    fetchTransactions();\n    fetchCategories();\n    fetchAccounts();\n  }, [page, rowsPerPage]);\n\n  const fetchTransactions = async () => {\n    try {\n      setLoading(true);\n      const queryParams = new URLSearchParams({\n        page: (page + 1).toString(),\n        limit: rowsPerPage.toString()\n      });\n      \n      const response = await fetch(`/api/transactions?${queryParams}`);\n      const data = await response.json();\n      \n      if (data.transactions && Array.isArray(data.transactions)) {\n        setTransactions(data.transactions);\n        setTotalCount(data.pagination?.total || 0);\n      } else {\n        // Fallback if the response format isn't as expected\n        setTransactions([]);\n        setTotalCount(0);\n        console.error('Unexpected API response format:', data);\n      }\n    } catch (error) {\n      console.error('Error fetching transactions:', error);\n      setTransactions([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const fetchCategories = async () => {\n    try {\n      const response = await fetch('/api/categories');\n      const data = await response.json();\n      setCategories(data);\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      setCategories([]);\n    }\n  };\n\n  const fetchAccounts = async () => {\n    try {\n      const response = await fetch('/api/accounts');\n      const data = await response.json();\n      setAccounts(data);\n    } catch (error) {\n      console.error('Error fetching accounts:', error);\n      setAccounts([]);\n    }\n  };\n\n  const handleOpenDialog = (transaction?: Transaction) => {\n    if (transaction) {\n      setEditingTransaction(transaction);\n      setFormData({\n        description: transaction.description,\n        amount: transaction.amount.toString(),\n        type: transaction.type,\n        date: new Date(transaction.date).toISOString().split('T')[0],\n        categoryId: transaction.categoryId.toString(),\n        accountId: transaction.accountId.toString(),\n        toAccountId: '',\n      });\n    } else {\n      setEditingTransaction(null);\n      setFormData({\n        description: '',\n        amount: '',\n        type: 'expense',\n        date: new Date().toISOString().split('T')[0],\n        categoryId: '',\n        accountId: '',\n        toAccountId: '',\n      });\n    }\n    setOpenDialog(true);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n    setEditingTransaction(null);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const payload = {\n        ...(editingTransaction && { id: editingTransaction.id }),\n        description: formData.description,\n        amount: parseFloat(formData.amount),\n        type: formData.type,\n        date: formData.date,\n        accountId: parseInt(formData.accountId),\n        ...(formData.type !== 'transfer' ? { categoryId: parseInt(formData.categoryId) } : {}),\n        ...(formData.type === 'transfer' && formData.toAccountId ? { toAccountId: parseInt(formData.toAccountId) } : {}),\n      };\n\n      const response = await fetch('/api/transactions', {\n        method: editingTransaction ? 'PUT' : 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(payload),\n      });\n\n      if (response.ok) {\n        handleCloseDialog();\n        fetchTransactions();\n      } else {\n        const error = await response.json();\n        alert(`${t('error')}: ${error.error || t('transactions.save_failed')}`);\n      }\n    } catch (error) {\n      console.error('Error saving transaction:', error);\n      alert(t('transactions.save_failed_try_again'));\n    }\n  };\n\n  const handleDelete = async (id: number) => {\n    if (window.confirm(t('transactions.delete_confirmation'))) {\n      try {\n        const response = await fetch(`/api/transactions/${id}`, {\n          method: 'DELETE',\n        });\n\n        if (response.ok) {\n          fetchTransactions();\n        }\n      } catch (error) {\n        console.error('Error deleting transaction:', error);\n      }\n    }\n  };\n\n  const handleChangePage = (event: unknown, newPage: number) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  if (loading && (!transactions || transactions.length === 0)) {\n    return (\n      <DashboardLayout>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\n          <CircularProgress />\n        </Box>\n      </DashboardLayout>\n    );\n  }\n\n  // Ensure transactions is always an array\n  const safeTransactions = Array.isArray(transactions) ? transactions : [];\n\n  // Function to translate category names\n  const getTranslatedCategoryName = (name) => {\n    if (!name) return 'N/A';\n    \n    // Convert category name to lowercase and handle special cases\n    let key = name.toLowerCase().replace(/[&\\s]+/g, '_');\n    \n    // Special case for categories with hardcoded names that don't match our keys\n    if (key === 'food_&_dining') key = 'food_dining';\n    if (key === 'debt_payments') key = 'debt_payments';\n    \n    // Try to get direct translation for the category\n    const translationKey = `categories.${key}`;\n    const directTranslation = t(translationKey);\n    \n    // If key is returned, it means no translation was found\n    if (directTranslation === translationKey) {\n      return name; // Return original name\n    }\n    \n    return directTranslation;\n  };\n\n  return (\n    <DashboardLayout>\n      <Box className=\"content-container\" sx={{ py: 3 }}>\n        <Box className=\"page-title-container\">\n          <Typography variant=\"h4\">{t('transactions.title')}</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => handleOpenDialog()}\n            className=\"add-button\"\n          >\n            {t('transactions.add_transaction')}\n          </Button>\n        </Box>\n\n        <Paper className=\"transactions-container\">\n          <TableContainer>\n            <Table className=\"transactions-table\" aria-label=\"transactions table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell className=\"table-header-cell\">{t('transactions.date')}</TableCell>\n                  <TableCell className=\"table-header-cell\">{t('transactions.description')}</TableCell>\n                  <TableCell className=\"table-header-cell\">{t('transactions.category')}</TableCell>\n                  <TableCell className=\"table-header-cell\">{t('transactions.account')}</TableCell>\n                  <TableCell className=\"table-header-cell\" align=\"right\">{t('transactions.amount')}</TableCell>\n                  <TableCell className=\"table-header-cell\">{t('transactions.type')}</TableCell>\n                  <TableCell className=\"table-header-cell\" align=\"center\">{t('transactions.actions')}</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {safeTransactions.map((transaction) => (\n                  <TableRow key={transaction.id} hover>\n                    <TableCell>\n                      {new Date(transaction.date).toLocaleDateString()}\n                    </TableCell>\n                    <TableCell>{transaction.description}</TableCell>\n                    <TableCell>\n                      <Box className=\"category-indicator\">\n                        <Box\n                          className=\"category-color-dot\"\n                          sx={{ backgroundColor: transaction.category?.color || '#ccc' }}\n                        />\n                        {transaction.category ? getTranslatedCategoryName(transaction.category.name) : 'N/A'}\n                      </Box>\n                    </TableCell>\n                    <TableCell>{transaction.account?.name || 'N/A'}</TableCell>\n                    <TableCell \n                      align=\"right\" \n                      className={`transaction-amount ${transaction.type}`}\n                    >\n                      {transaction.account?.currency || ''} {Math.abs(transaction.amount).toFixed(2)}\n                    </TableCell>\n                    <TableCell>\n                      <Chip \n                        label={t(`transactions.${transaction.type}`)} \n                        size=\"small\" \n                        className={`transaction-type-chip ${transaction.type}`}\n                      />\n                    </TableCell>\n                    <TableCell align=\"center\">\n                      <IconButton onClick={() => handleOpenDialog(transaction)} size=\"small\">\n                        <EditIcon fontSize=\"small\" />\n                      </IconButton>\n                      <IconButton onClick={() => handleDelete(transaction.id)} size=\"small\" color=\"error\">\n                        <DeleteIcon fontSize=\"small\" />\n                      </IconButton>\n                    </TableCell>\n                  </TableRow>\n                ))}\n                {safeTransactions.length === 0 && (\n                  <TableRow>\n                    <TableCell colSpan={7} align=\"center\" sx={{ py: 4 }}>\n                      {t('transactions.no_transactions')}\n                    </TableCell>\n                  </TableRow>\n                )}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <Box className=\"pagination-container\">\n            <TablePagination\n              component=\"div\"\n              count={totalCount}\n              page={page}\n              onPageChange={handleChangePage}\n              rowsPerPage={rowsPerPage}\n              onRowsPerPageChange={handleChangeRowsPerPage}\n              rowsPerPageOptions={[5, 10, 25, 50]}\n              labelRowsPerPage={t('transactions.rows_per_page')}\n              labelDisplayedRows={({ from, to, count }) => `${from}-${to} ${t('of')} ${count}`}\n            />\n          </Box>\n        </Paper>\n\n        <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth=\"sm\" fullWidth>\n          <DialogTitle>\n            {editingTransaction ? t('transactions.edit_transaction') : t('transactions.add_transaction')}\n          </DialogTitle>\n          <DialogContent>\n            <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 2 }}>\n              <TextField\n                fullWidth\n                label={t('transactions.description')}\n                value={formData.description}\n                onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                margin=\"normal\"\n                required\n              />\n              <TextField\n                fullWidth\n                label={t('transactions.amount')}\n                type=\"number\"\n                value={formData.amount}\n                onChange={(e) => setFormData({ ...formData, amount: e.target.value })}\n                margin=\"normal\"\n                required\n              />\n              <TextField\n                fullWidth\n                select\n                label={t('transactions.type')}\n                value={formData.type}\n                onChange={(e) => setFormData({ ...formData, type: e.target.value as 'income' | 'expense' | 'transfer' })}\n                margin=\"normal\"\n                required\n              >\n                {transactionTypes.map((type) => (\n                  <MenuItem key={type.value} value={type.value}>\n                    {type.label}\n                  </MenuItem>\n                ))}\n              </TextField>\n              <TextField\n                fullWidth\n                type=\"date\"\n                label={t('transactions.date')}\n                value={formData.date}\n                onChange={(e) => setFormData({ ...formData, date: e.target.value })}\n                margin=\"normal\"\n                required\n                InputLabelProps={{\n                  shrink: true,\n                }}\n              />\n              <TextField\n                fullWidth\n                select\n                label={t('transactions.account')}\n                value={formData.accountId}\n                onChange={(e) => setFormData({ ...formData, accountId: e.target.value })}\n                margin=\"normal\"\n                required\n              >\n                {accounts.map((account) => (\n                  <MenuItem key={account.id} value={account.id}>\n                    {account.name} ({account.currency})\n                  </MenuItem>\n                ))}\n              </TextField>\n              {formData.type === 'transfer' && (\n                <TextField\n                  fullWidth\n                  select\n                  label={t('transactions.to_account')}\n                  value={formData.toAccountId}\n                  onChange={(e) => setFormData({ ...formData, toAccountId: e.target.value })}\n                  margin=\"normal\"\n                  required\n                >\n                  {accounts\n                    .filter((account) => account.id.toString() !== formData.accountId)\n                    .map((account) => (\n                      <MenuItem key={account.id} value={account.id}>\n                        {account.name} ({account.currency})\n                      </MenuItem>\n                    ))}\n                </TextField>\n              )}\n              {formData.type !== 'transfer' && (\n                <TextField\n                  fullWidth\n                  select\n                  label={t('transactions.category')}\n                  value={formData.categoryId}\n                  onChange={(e) => setFormData({ ...formData, categoryId: e.target.value })}\n                  margin=\"normal\"\n                  required\n                >\n                  {categories\n                    .filter((category) => category.type === formData.type)\n                    .map((category) => (\n                      <MenuItem key={category.id} value={category.id}>\n                        {getTranslatedCategoryName(category.name)}\n                      </MenuItem>\n                    ))}\n                </TextField>\n              )}\n            </Box>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleCloseDialog}>{t('cancel')}</Button>\n            <Button onClick={handleSubmit} variant=\"contained\">\n              {editingTransaction ? t('save') : t('add')}\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Box>\n    </DashboardLayout>\n  );\n} "],"names":[],"mappings":"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","debugId":null}}]
}