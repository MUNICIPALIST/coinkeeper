{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/miraskarasbekov/Desktop/CoinKeeperNew/coinkeeper/src/app/categories/page.tsx"],"sourcesContent":["// @ts-nocheck\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useSession } from 'next-auth/react';\nimport DashboardLayout from '@/components/layouts/dashboard-layout';\nimport { useLanguage } from '@/providers/language-provider';\nimport Box from '@mui/material/Box';\nimport Button from '@mui/material/Button';\nimport Paper from '@mui/material/Paper';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport Dialog from '@mui/material/Dialog';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogActions from '@mui/material/DialogActions';\nimport TextField from '@mui/material/TextField';\nimport MenuItem from '@mui/material/MenuItem';\nimport IconButton from '@mui/material/IconButton';\nimport CircularProgress from '@mui/material/CircularProgress';\nimport Chip from '@mui/material/Chip';\nimport Divider from '@mui/material/Divider';\nimport {\n  Add as AddIcon,\n  Edit as EditIcon,\n  Delete as DeleteIcon,\n} from '@mui/icons-material';\n\ninterface Category {\n  id: number;\n  name: string;\n  type: 'income' | 'expense';\n  color: string;\n  icon?: string;\n}\n\n// Популярные эмодзи для категорий\nconst popularIcons = {\n  income: ['💰', '💸', '💵', '💴', '💶', '💷', '💹', '💼', '🏦', '👔', '👨‍💼', '👩‍💼', '🏆', '🎯'],\n  expense: ['🛒', '🛍️', '🍔', '🍕', '🥗', '🚗', '🚕', '🏠', '🏥', '🏫', '💊', '📚', '🎬', '👕', '👗', '💄', '✈️', '🚀', '🔌', '💻', '📱', '🏋️‍♂️', '🎮', '☕', '🍻', '🛢️', '⚙️']\n};\n\nexport default function CategoriesPage() {\n  const { data: session } = useSession();\n  const { t } = useLanguage();\n  const [categories, setCategories] = useState<Category[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [openDialog, setOpenDialog] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<Category | null>(null);\n  const [formData, setFormData] = useState({\n    name: '',\n    type: 'expense',\n    color: '#1976d2',\n    icon: '',\n  });\n\n  useEffect(() => {\n    fetchCategories();\n  }, []);\n\n  const fetchCategories = async () => {\n    try {\n      setLoading(true);\n      const response = await fetch('/api/categories');\n      const data = await response.json();\n      setCategories(data);\n    } catch (error) {\n      console.error('Error fetching categories:', error);\n      // Initialize with empty array to avoid undefined errors\n      setCategories([]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleOpenDialog = (category?: Category) => {\n    if (category) {\n      setEditingCategory(category);\n      setFormData({\n        name: category.name,\n        type: category.type,\n        color: category.color,\n        icon: category.icon || '',\n      });\n    } else {\n      setEditingCategory(null);\n      setFormData({\n        name: '',\n        type: 'expense',\n        color: '#1976d2',\n        icon: '',\n      });\n    }\n    setOpenDialog(true);\n  };\n\n  const handleCloseDialog = () => {\n    setOpenDialog(false);\n    setEditingCategory(null);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    try {\n      const response = await fetch('/api/categories', {\n        method: editingCategory ? 'PUT' : 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...(editingCategory && { id: editingCategory.id }),\n          ...formData,\n        }),\n      });\n\n      if (response.ok) {\n        handleCloseDialog();\n        fetchCategories();\n      }\n    } catch (error) {\n      console.error('Error saving category:', error);\n    }\n  };\n\n  const handleDelete = async (id: number) => {\n    if (window.confirm(t('categories.delete_confirmation'))) {\n      try {\n        const response = await fetch(`/api/categories/${id}`, {\n          method: 'DELETE',\n        });\n\n        if (response.ok) {\n          fetchCategories();\n        }\n      } catch (error) {\n        console.error('Error deleting category:', error);\n      }\n    }\n  };\n\n  // Function to translate category names\n  const getTranslatedCategoryName = (name) => {\n    // Convert category name to lowercase and handle special cases\n    let key = name.toLowerCase().replace(/[&\\s]+/g, '_');\n    \n    // Special case for categories with hardcoded names that don't match our keys\n    if (key === 'food_&_dining') key = 'food_dining';\n    if (key === 'debt_payments') key = 'debt_payments';\n    \n    // Try to get direct translation for the category\n    const translationKey = `categories.${key}`;\n    const directTranslation = t(translationKey);\n    \n    // If key is returned, it means no translation was found\n    if (directTranslation === translationKey) {\n      return name; // Return original name\n    }\n    \n    return directTranslation;\n  };\n\n  if (loading) {\n    return (\n      <DashboardLayout>\n        <Box display=\"flex\" justifyContent=\"center\" alignItems=\"center\" minHeight=\"80vh\">\n          <CircularProgress />\n        </Box>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout>\n      <Box className=\"content-container\" sx={{ py: 3 }}>\n        <Box className=\"page-title-container\">\n          <Typography variant=\"h4\">{t('categories.title')}</Typography>\n          <Button\n            variant=\"contained\"\n            startIcon={<AddIcon />}\n            onClick={() => handleOpenDialog()}\n            className=\"add-button\"\n          >\n            {t('categories.add_category')}\n          </Button>\n        </Box>\n\n        <Box className=\"categories-grid\">\n          {categories.length === 0 ? (\n            <Box className=\"empty-state\" sx={{ textAlign: 'center', p: 4 }}>\n              <Typography variant=\"h6\">{t('categories.no_categories')}</Typography>\n              <Button\n                variant=\"contained\"\n                startIcon={<AddIcon />}\n                onClick={() => handleOpenDialog()}\n                sx={{ mt: 2 }}\n              >\n                {t('categories.add_category')}\n              </Button>\n            </Box>\n          ) : (\n            categories.map((category) => (\n              <Paper className={`category-card ${category.type}`} key={category.id}>\n                <Box className=\"category-info\">\n                  <Box\n                    className=\"category-icon-container\"\n                    sx={{ bgcolor: category.color }}\n                  >\n                    <span className=\"category-icon\">\n                      {category.icon || category.name.charAt(0).toUpperCase()}\n                    </span>\n                  </Box>\n                  <Box className=\"category-text\">\n                    <Typography className=\"category-name\">\n                      {getTranslatedCategoryName(category.name)}\n                    </Typography>\n                    <Typography className=\"category-type\">\n                      <span className={`category-type-indicator ${category.type}`}></span>\n                      {t(`categories.${category.type}`)}\n                    </Typography>\n                  </Box>\n                </Box>\n                <Box className=\"category-actions\">\n                  <IconButton onClick={() => handleOpenDialog(category)} size=\"small\">\n                    <EditIcon fontSize=\"small\" />\n                  </IconButton>\n                  <IconButton onClick={() => handleDelete(category.id)} size=\"small\" color=\"error\">\n                    <DeleteIcon fontSize=\"small\" />\n                  </IconButton>\n                </Box>\n              </Paper>\n            ))\n          )}\n        </Box>\n\n        <Dialog open={openDialog} onClose={handleCloseDialog} maxWidth=\"sm\" fullWidth>\n          <DialogTitle>\n            {editingCategory ? t('categories.edit_category') : t('categories.add_category')}\n          </DialogTitle>\n          <DialogContent>\n            <Box component=\"form\" onSubmit={handleSubmit} sx={{ mt: 2 }}>\n              <TextField\n                fullWidth\n                label={t('categories.name')}\n                value={formData.name}\n                onChange={(e) => setFormData({ ...formData, name: e.target.value })}\n                margin=\"normal\"\n                required\n              />\n              <TextField\n                fullWidth\n                select\n                label={t('categories.type')}\n                value={formData.type}\n                onChange={(e) => setFormData({ ...formData, type: e.target.value })}\n                margin=\"normal\"\n                required\n              >\n                <MenuItem value=\"income\">{t('categories.income')}</MenuItem>\n                <MenuItem value=\"expense\">{t('categories.expense')}</MenuItem>\n              </TextField>\n              <TextField\n                fullWidth\n                label={t('categories.color')}\n                type=\"color\"\n                value={formData.color}\n                onChange={(e) => setFormData({ ...formData, color: e.target.value })}\n                margin=\"normal\"\n                required\n                InputLabelProps={{ shrink: true }}\n              />\n              <TextField\n                fullWidth\n                label={t('categories.icon')}\n                value={formData.icon}\n                onChange={(e) => setFormData({ ...formData, icon: e.target.value })}\n                margin=\"normal\"\n                helperText={t('categories.icon_helper_text') || \"Enter an icon name or emoji symbol (e.g. 🍕, 🏠, 💰, 🚗)\"}\n              />\n              \n              <Box className=\"icon-selector-container\">\n                <Typography className=\"icon-selector-title\">\n                  {t('categories.popular_icons')} {t(`categories.${formData.type}`)}:\n                </Typography>\n                <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mt: 1 }}>\n                  {popularIcons[formData.type === 'income' ? 'income' : 'expense'].map((icon, index) => (\n                    <Chip\n                      key={index}\n                      label={icon}\n                      onClick={() => setFormData({ ...formData, icon })}\n                      variant={formData.icon === icon ? \"filled\" : \"outlined\"}\n                      className=\"icon-chip\"\n                      classes={{ label: 'icon-label' }}\n                      sx={{ \n                        bgcolor: formData.icon === icon ? 'rgba(25, 118, 210, 0.1)' : 'transparent',\n                        borderColor: formData.icon === icon ? 'primary.main' : 'divider'\n                      }}\n                    />\n                  ))}\n                </Box>\n              </Box>\n            </Box>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleCloseDialog}>{t('cancel')}</Button>\n            <Button onClick={handleSubmit} variant=\"contained\">\n              {editingCategory ? t('save') : t('add')}\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </Box>\n    </DashboardLayout>\n  );\n} "],"names":[],"mappings":"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","debugId":null}}]
}